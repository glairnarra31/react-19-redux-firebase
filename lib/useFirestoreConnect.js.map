{"version":3,"file":"useFirestoreConnect.js","names":["useFirestoreConnect","queriesConfigs","firestore","useFirestore","firestoreIsEnabled","queryRef","useRef","data","useMemo","invokeArrayQuery","useEffect","_isEqual2","default","current","changes","getChanges","unsetListeners","removed","setListeners","added","module","exports"],"sources":["../src/useFirestoreConnect.js"],"sourcesContent":["import { isEqual } from 'lodash'\nimport { useRef, useMemo, useEffect } from 'react'\nimport { invokeArrayQuery, getChanges } from './utils'\nimport useFirestore from './useFirestore'\n\n/**\n * @description React hook that automatically listens/unListens\n * to provided Cloud Firestore paths. Make sure you have required/imported\n * Cloud Firestore, including it's reducer, before attempting to use.\n * Populate is supported for Firestore as of v0.6.0 of redux-firestore (added\n * [as part of issue #48](https://github.com/prescottprue/redux-firestore/issues/48)).\n * @param {Array|Function} queriesConfigs - An object, string,\n * or array of object or string for paths to sync from firestore. Can also be\n * a function that returns the object, string, or array of object or string.\n * @see https://react-redux-firebase.com/docs/api/useFirestoreConnect.html\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodosList() {\n *   useFirestoreConnect(['todos']) // sync todos collection from Firestore into redux\n *   const todos = useSelector(state => state.firestore.data.todos)\n *   return (\n *     <ul>\n *       {todos &&\n *         todos.map((todo) => (\n *           <li>id: {todo.id} todo: {todo.description}</li>\n *         ))}\n *    </ul>\n *   )\n * }\n * @example <caption>Object as query</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodoItem({ todoId }) {\n *   useFirestoreConnect([{\n *     collection: 'todos',\n *     doc: todoId\n *   }])\n *   const todo = useSelector(\n *     ({ firestore: { data } }) => data.todos && data.todos[todoId]\n *   )\n *\n *   return <div>{JSON.stringify(todo)}</div>\n * }\n */\nexport default function useFirestoreConnect(queriesConfigs) {\n  const firestore = useFirestore()\n  const firestoreIsEnabled = !!firestore\n  const queryRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(queriesConfigs), [queriesConfigs])\n\n  useEffect(() => {\n    if (firestoreIsEnabled && !isEqual(data, queryRef.current)) {\n      const changes = getChanges(data, queryRef.current)\n\n      queryRef.current = data\n\n      // Remove listeners for inactive subscriptions\n      firestore.unsetListeners(changes.removed)\n\n      // Add listeners for new subscriptions\n      firestore.setListeners(changes.added)\n    }\n  }, [data])\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      if (firestoreIsEnabled && queryRef.current) {\n        firestore.unsetListeners(queryRef.current)\n      }\n    }\n  }, [])\n}\n"],"mappings":"kWAiDe,QAAS,CAAAA,mBAAmBA,CAACC,cAAc,CAAE,IACpD,CAAAC,SAAS,CAAG,GAAAC,qBAAY,EAAC,CAAC,CAC1BC,kBAAkB,CAAG,CAAC,CAACF,SAAS,CAChCG,QAAQ,CAAG,GAAAC,aAAM,EAAC,CAAC,CAEnBC,IAAI,CAAG,GAAAC,cAAO,EAAC,iBAAM,GAAAC,uBAAgB,EAACR,cAAc,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC,CAE9E,GAAAS,gBAAS,EAAC,UAAM,CACd,GAAIN,kBAAkB,EAAI,CAAC,GAAAO,SAAA,CAAAC,OAAA,EAAQL,IAAI,CAAEF,QAAQ,CAACQ,OAAO,CAAC,CAAE,CAC1D,GAAM,CAAAC,OAAO,CAAG,GAAAC,iBAAU,EAACR,IAAI,CAAEF,QAAQ,CAACQ,OAAO,CAAC,CAElDR,QAAQ,CAACQ,OAAO,CAAGN,IAAI,CAGvBL,SAAS,CAACc,cAAc,CAACF,OAAO,CAACG,OAAO,CAAC,CAGzCf,SAAS,CAACgB,YAAY,CAACJ,OAAO,CAACK,KAAK,CACtC,CACF,CAAC,CAAE,CAACZ,IAAI,CAAC,CAAC,CAGV,GAAAG,gBAAS,EAAC,UAAM,CACd,MAAO,WAAM,CACPN,kBAAkB,EAAIC,QAAQ,CAACQ,OAAO,EACxCX,SAAS,CAACc,cAAc,CAACX,QAAQ,CAACQ,OAAO,CAE7C,CACF,CAAC,CAAE,EAAE,CACP,CAACO,MAAA,CAAAC,OAAA,CAAAA,OAAA,CAAAT,OAAA","ignoreList":[]}