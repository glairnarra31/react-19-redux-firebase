{"version":3,"file":"createFirebaseInstance.js","names":["firebaseInstance","createFirebaseInstance","firebase","configs","dispatch","enableLogging","database","console","warn","_","_merge2","default","watchers","listeners","callbacks","queries","config","authUid","withMeta","method","path","value","onComplete","_isObject2","prefix","dataWithMeta","_objectSpread","_defineProperty","concat","ServerValue","TIMESTAMP","auth","currentUser","uid","ref","actionCreators","mapWithFirebaseAndDispatch","signInWithPhoneNumber","authActions","initializeAuth","init","Object","assign","_reactReduxFirebaseExtended","set","setWithMeta","uniqueSet","transaction","d","then","_ref","committed","snapshot","newError","Error","Promise","reject","push","pushWithMeta","remove","options","queryActions","update","updateWithMeta","login","credentials","reauthenticate","handleRedirectResult","authData","logout","updateAuth","authUpdate","updateInProfile","updateEmail","newEmail","updateProfile","profileUpdate","uploadFile","file","dbPath","storageActions","uploadFiles","files","deleteFile","createUser","profile","resetPassword","email","confirmPasswordReset","code","password","verifyPasswordResetCode","applyActionCode","watchEvent","type","storeAs","arguments","length","unWatchEvent","queryId","reloadAuth","linkWithCredential","credential","promiseEvents","watchArray","inputAsFunc","createCallable","prevData","queryConfigs","getEventsFromInput","all","map","queryConfig","getFirebase"],"sources":["../src/createFirebaseInstance.js"],"sourcesContent":["import { isObject } from 'lodash'\nimport { merge } from 'lodash/fp'\nimport { getEventsFromInput, createCallable } from './utils'\nimport { mapWithFirebaseAndDispatch } from './utils/actions'\nimport * as authActions from './actions/auth'\nimport * as queryActions from './actions/query'\nimport * as storageActions from './actions/storage'\n\nlet firebaseInstance\n\n/**\n * Create an extended firebase instance that has methods attached\n * which dispatch redux actions.\n * @param {object} firebase - Firebase instance which to extend\n * @param {object} configs - Configuration object\n * @param {Function} dispatch - Action dispatch function\n * @returns {object} Extended Firebase instance\n */\nexport default function createFirebaseInstance(firebase, configs, dispatch) {\n  /* istanbul ignore next: Logging is external */\n  // Enable Logging based on config (handling instances without i.e RNFirebase)\n  // NOTE: This will be removed in a future version\n  if (\n    configs &&\n    configs.enableLogging &&\n    firebase.database &&\n    typeof firebase.database.enableLogging === 'function'\n  ) {\n    /* eslint-disable no-console */\n    console.warn(\n      'The enableLogging config option is disabled and will be removed in a future version of react-redux-firebase. Enable logging as part of instance initialization.'\n    )\n    /* eslint-enable no-console */\n    firebase.database.enableLogging(configs.enableLogging)\n  }\n\n  // Add internal variables to firebase instance\n  const defaultInternals = {\n    watchers: {},\n    listeners: {},\n    callbacks: {},\n    queries: {},\n    config: configs,\n    authUid: null\n  }\n\n  firebase._ = merge(defaultInternals, firebase._) // eslint-disable-line no-param-reassign\n\n  /**\n   * @private\n   * @param {string} method - Method to run with meta attached\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete\n   * @returns {Promise} Containing reference snapshot\n   */\n  const withMeta = (method, path, value, onComplete) => {\n    if (isObject(value)) {\n      const prefix = method === 'update' ? 'updated' : 'created'\n      const dataWithMeta = {\n        ...value,\n        [`${prefix}At`]: firebase.database.ServerValue.TIMESTAMP\n      }\n      if (firebase.auth().currentUser) {\n        dataWithMeta[`${prefix}By`] = firebase.auth().currentUser.uid\n      }\n      return firebase.database().ref(path)[method](dataWithMeta, onComplete)\n    }\n    return firebase.database().ref(path)[method](value, onComplete)\n  }\n\n  /**\n   * Sets data to Firebase.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#set\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   * function Example({ firebase: { set } }) {\n   *   return (\n   *     <button onClick={() => set('some/path', { here: 'is a value' })}>\n   *     Set To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const set = (path, value, onComplete) =>\n    firebase.database().ref(path).set(value, onComplete)\n\n  /**\n   * Sets data to Firebase along with meta data. Currently,\n   * this includes createdAt and createdBy. *Warning* using this function\n   * may have unintented consequences (setting createdAt even if data already\n   * exists).\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#update\n   */\n  const setWithMeta = (path, value, onComplete) =>\n    withMeta('set', path, value, onComplete)\n\n  /**\n   * Pushes data to Firebase.\n   * @param {string} path - Path to location on Firebase which to push\n   * @param {object|string|boolean|number} value - Value to push to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#push\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { push } }) {\n   *   return (\n   *     <button onClick={() => push('some/path', true)}>\n   *       Push To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const push = (path, value, onComplete) =>\n    firebase.database().ref(path).push(value, onComplete)\n\n  /**\n   * Pushes data to Firebase along with meta data. Currently,\n   * this includes createdAt and createdBy.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#pushwithmeta\n   */\n  const pushWithMeta = (path, value, onComplete) =>\n    withMeta('push', path, value, onComplete)\n\n  /**\n   * Updates data on Firebase and sends new data. More info\n   * available in [the docs](https://react-redux-firebase.com/docs/api/firebaseInstance.html#update).\n   * @param {string} path - Path to location on Firebase which to update\n   * @param {object|string|boolean|number} value - Value to update to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { update } }) {\n   *   function updateData() {\n   *     update('some/path', { here: 'is a value' })\n   *   }\n   * }\n   *   return (\n   *     <button onClick={updateData}>\n   *       Update To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const update = (path, value, onComplete) =>\n    firebase.database().ref(path).update(value, onComplete)\n\n  /**\n   * Updates data on Firebase along with meta. *Warning*\n   * using this function may have unintented consequences (setting\n   * createdAt even if data already exists).\n   * @param {string} path - Path to location on Firebase which to update\n   * @param {object|string|boolean|number} value - Value to update to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updatewithmeta\n   */\n  const updateWithMeta = (path, value, onComplete) =>\n    withMeta('update', path, value, onComplete)\n\n  /**\n   * Removes data from Firebase at a given path. **NOTE** A\n   * seperate action is not dispatched unless `dispatchRemoveAction: true` is\n   * provided to config on store creation. That means that a listener must\n   * be attached in order for state to be updated when calling remove.\n   * @param {string} path - Path to location on Firebase which to remove\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @param {Function} options - Options object\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#remove\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { remove } }) {\n   *   return (\n   *     <button onClick={() => remove('some/path')}>\n   *       Remove From Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const remove = (path, onComplete, options) =>\n    queryActions.remove(firebase, dispatch, path, options).then(() => {\n      if (typeof onComplete === 'function') onComplete()\n      return path\n    })\n\n  /**\n   * Sets data to Firebase only if the path does not already\n   * exist, otherwise it rejects. Internally uses a Firebase transaction to\n   * prevent a race condition between seperate clients calling uniqueSet.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uniqueset\n   * @example <caption>Basic</caption>\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { uniqueSet } }) {\n   *   return (\n   *     <button onClick={() => uniqueSet('some/unique/path', true)}>\n   *       Unique Set To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const uniqueSet = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .transaction((d) => (d === null ? value : undefined))\n      .then(({ committed, snapshot }) => {\n        if (!committed) {\n          const newError = new Error('Path already exists.')\n          if (onComplete) onComplete(newError)\n          return Promise.reject(newError)\n        }\n        if (onComplete) onComplete(snapshot)\n        return snapshot\n      })\n\n  /**\n   * Upload a file to Firebase Storage with the option to store\n   * its metadata in Firebase Database. More info available\n   * in [the docs]().\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {File} file - File object to upload (usually first element from\n   * array output of select-file or a drag/drop `onDrop`)\n   * @param {string} dbPath - Database path to place uploaded file metadata\n   * @param {object} options - Options\n   * @param {string} options.name - Name of the file\n   * @param {object} options.metdata - Metadata for the file (passed as second\n   * argument to storage.put calls)\n   * @returns {Promise} Containing the File object\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uploadfile\n   */\n  const uploadFile = (path, file, dbPath, options) =>\n    storageActions.uploadFile(dispatch, firebase, {\n      path,\n      file,\n      dbPath,\n      options\n    })\n\n  /**\n   * Upload multiple files to Firebase Storage with the option\n   * to store their metadata in Firebase Database.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {Array} files - Array of File objects to upload (usually from\n   * a select-file or a drag/drop `onDrop`)\n   * @param {string} dbPath - Database path to place uploaded files metadata.\n   * @param {object} options - Options\n   * @param {string} options.name - Name of the file\n   * @returns {Promise} Containing an array of File objects\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uploadfiles\n   */\n  const uploadFiles = (path, files, dbPath, options) =>\n    storageActions.uploadFiles(dispatch, firebase, {\n      path,\n      files,\n      dbPath,\n      options\n    })\n\n  /**\n   * Delete a file from Firebase Storage with the option to\n   * remove its metadata in Firebase Database.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {string} dbPath - Database path to place uploaded file metadata\n   * @returns {Promise} Containing the File object\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#deletefile\n   */\n  const deleteFile = (path, dbPath) =>\n    storageActions.deleteFile(dispatch, firebase, { path, dbPath })\n\n  /**\n   * Watch event. **Note:** this method is used internally\n   * so examples have not yet been created, and it may not work as expected.\n   * @param {string} type - Type of watch event\n   * @param {string} path - Path to location on Firebase which to set listener\n   * @param {string} storeAs - Name of listener results within redux store\n   * @param {object} options - Event options object\n   * @param {Array} options.queryParams - List of parameters for the query\n   * @param {string} options.queryId - id of the query\n   * @returns {Promise|void} Results of calling watch event\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#watchevent\n   */\n  const watchEvent = (type, path, storeAs, options = {}) =>\n    queryActions.watchEvent(firebase, dispatch, {\n      type,\n      path,\n      storeAs,\n      ...options\n    })\n\n  /**\n   * Unset a listener watch event. **Note:** this method is used\n   * internally so examples have not yet been created, and it may not work\n   * as expected.\n   * @param {string} type - Type of watch event\n   * @param {string} path - Path to location on Firebase which to unset listener\n   * @param {string} queryId - Id of the listener\n   * @param {object} options - Event options object\n   * @returns {void}\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#unwatchevent\n   */\n  const unWatchEvent = (type, path, queryId, options = {}) =>\n    queryActions.unWatchEvent(firebase, dispatch, {\n      type,\n      path,\n      queryId,\n      ...options\n    })\n\n  /**\n   * Similar to the firebaseConnect Higher Order Component but\n   * presented as a function (not a React Component). Useful for populating\n   * your redux state without React, e.g., for server side rendering. Only\n   * `once` type should be used as other query types such as `value` do not\n   * return a Promise.\n   * @param {Array} watchArray - Array of objects or strings for paths to sync\n   * from Firebase. Can also be a function that returns the array. The function\n   * is passed the props object specified as the next parameter.\n   * @param {object} options - The options object that you would like to pass to\n   * your watchArray generating function.\n   * @returns {Promise} Resolves with an array of watchEvent results\n   */\n  const promiseEvents = (watchArray, options) => {\n    const inputAsFunc = createCallable(watchArray)\n    const prevData = inputAsFunc(options, firebase)\n    const queryConfigs = getEventsFromInput(prevData)\n    // TODO: Handle calling with non promise queries (must be once or first_child)\n    return Promise.all(\n      queryConfigs.map((queryConfig) =>\n        queryActions.watchEvent(firebase, dispatch, queryConfig)\n      )\n    )\n  }\n\n  /**\n   * Logs user into Firebase. For examples, visit the\n   * [auth section of the docs](https://react-redux-firebase.com/docs/auth.html) or the\n   * [auth recipes section](https://react-redux-firebase.com/docs/recipes/auth.html).\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.provider - External provider (google |\n   * facebook | twitter)\n   * @param {string} credentials.type - Type of external authentication\n   * (popup | redirect) (only used with provider)\n   * @param {string} credentials.email - Credentials for authenticating\n   * @param {string} credentials.password - Credentials for authenticating (only used with email)\n   * @param {string} credentials.emailLink - emailLink for authenticating (only used with passwordless sign-in)\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#logincredentials\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#login\n   */\n  const login = (credentials) =>\n    authActions.login(dispatch, firebase, credentials)\n\n  /**\n   * Reauthenticate user into Firebase. For examples, visit the\n   * [auth section of the docs](https://react-redux-firebase.com/docs/auth.html) or the\n   * [auth recipes section](https://react-redux-firebase.com/docs/recipes/auth.html).\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.provider - External provider (google |\n   * facebook | twitter)\n   * @param {string} credentials.type - Type of external authentication\n   * (popup | redirect) (only used with provider)\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#logincredentials\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#login\n   */\n  const reauthenticate = (credentials) =>\n    authActions.reauthenticate(dispatch, firebase, credentials)\n\n  /**\n   * Logs user into Firebase using external. For examples, visit the\n   * [auth section](/docs/recipes/auth.md)\n   * @param {object} authData - Auth data from Firebase's getRedirectResult\n   * @returns {Promise} Containing user's profile\n   */\n  const handleRedirectResult = (authData) =>\n    authActions.handleRedirectResult(dispatch, firebase, authData)\n\n  /**\n   * Logs user out of Firebase and empties firebase state from\n   * redux store\n   * @returns {Promise} Resolves after logout is complete\n   * @see https://react-redux-firebase.com/docs/auth.html#logout\n   */\n  const logout = () => authActions.logout(dispatch, firebase)\n\n  /**\n   * Creates a new user in Firebase authentication. If\n   * `userProfile` config option is set, user profiles will be set to this\n   * location.\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.email - Credentials for authenticating\n   * @param {string} credentials.password - Credentials for authenticating (only used with email)\n   * @param {object} profile - Data to include within new user profile\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#createuser\n   */\n  const createUser = (credentials, profile) =>\n    authActions.createUser(dispatch, firebase, credentials, profile)\n\n  /**\n   * Sends password reset email\n   * @param {string} email - Email to send recovery email to\n   * @returns {Promise} Resolves after password reset email is sent\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#resetpassword\n   */\n  const resetPassword = (email) =>\n    authActions.resetPassword(dispatch, firebase, email)\n\n  /**\n   * Confirm that a user's password has been reset\n   * @param {string} code - Password reset code to verify\n   * @param {string} password - New Password to confirm reset to\n   * @returns {Promise} Resolves after password reset is confirmed\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#confirmpasswordreset\n   */\n  const confirmPasswordReset = (code, password) =>\n    authActions.confirmPasswordReset(dispatch, firebase, code, password)\n\n  /**\n   * Verify that a password reset code from a password reset\n   * email is valid\n   * @param {string} code - Password reset code to verify\n   * @returns {Promise} Containing user auth info\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#verifypasswordreset\n   */\n  const verifyPasswordResetCode = (code) =>\n    authActions.verifyPasswordResetCode(dispatch, firebase, code)\n\n  /**\n   * Apply verification code\n   * @param {string} code - Verification code\n   * @returns {Promise} Resolves on success\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#applyactioncode\n   */\n  const applyActionCode = (code) =>\n    authActions.applyActionCode(dispatch, firebase, code)\n\n  /**\n   * Update user profile on Firebase Real Time Database or\n   * Firestore (if `useFirestoreForProfile: true` config included).\n   * Real Time Database update uses `update` method internally while\n   * updating profile on Firestore uses `set`.\n   * @param {object} profileUpdate - Profile data to place in new profile\n   * @param {object} options - Options object (used to change how profile\n   * update occurs)\n   * @param {boolean} [options.useSet=true] - Use set with merge instead of\n   * update. Setting to `false` uses update (can cause issue of profile document\n   * does not exist). Note: Only used when updating profile on Firestore\n   * @param {boolean} [options.merge=true] - Whether or not to use merge when\n   * setting profile. Note: Only used when updating profile on Firestore\n   * @returns {Promise} Returns after updating profile within database\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateprofile\n   */\n  const updateProfile = (profileUpdate, options) =>\n    authActions.updateProfile(dispatch, firebase, profileUpdate, options)\n\n  /**\n   * Update Auth profile object\n   * @param {object} authUpdate - Update to be auth object\n   * @param {boolean} updateInProfile - Update in profile\n   * @returns {Promise} Returns after updating auth profile\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateauth\n   */\n  const updateAuth = (authUpdate, updateInProfile) =>\n    authActions.updateAuth(dispatch, firebase, authUpdate, updateInProfile)\n\n  /**\n   * Update user's email\n   * @param {string} newEmail - Update to be auth object\n   * @param {boolean} updateInProfile - Update in profile\n   * @returns {Promise} Resolves after email is updated in user's auth\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateemail\n   */\n  const updateEmail = (newEmail, updateInProfile) =>\n    authActions.updateEmail(dispatch, firebase, newEmail, updateInProfile)\n\n  /**\n   * Reload user's auth object. Must be authenticated.\n   * @returns {Promise} Resolves after reloading firebase auth\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#reloadauth\n   */\n  const reloadAuth = () => authActions.reloadAuth(dispatch, firebase)\n\n  /**\n   * Links the user account with the given credentials.\n   * @param {firebase.auth.AuthCredential} credential - The auth credential\n   * @returns {Promise} Resolves after linking auth with a credential\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#linkwithcredential\n   */\n  const linkWithCredential = (credential) =>\n    authActions.linkWithCredential(dispatch, firebase, credential)\n\n  /**\n   * @name signInWithPhoneNumber\n   * Asynchronously signs in using a phone number. This method\n   * sends a code via SMS to the given phone number, and returns a modified\n   * firebase.auth.ConfirmationResult. The `confirm` method\n   * authenticates and does profile handling.\n   * @param {firebase.auth.ConfirmationResult} credential - The auth credential\n   * @returns {Promise}\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#signinwithphonenumber\n   */\n\n  /**\n   * @name initializeAuth\n   * Initialize auth to work with build in profile support\n   */\n  const actionCreators = mapWithFirebaseAndDispatch(\n    firebase,\n    dispatch,\n    // Actions with arg order (firebase, dispatch)\n    {\n      signInWithPhoneNumber: authActions.signInWithPhoneNumber\n    },\n    // Actions with arg order (dispatch, firebase)\n    {\n      initializeAuth: authActions.init\n    }\n  )\n\n  /**\n   * @name ref\n   * @description Firebase ref function\n   * @returns {firebase.database.Reference}\n   */\n  /**\n   * @name database\n   * @description Firebase database service instance including all Firebase storage methods\n   * @returns {firebase.database.Database} Firebase database service\n   */\n  /**\n   * @name storage\n   * @description Firebase storage service instance including all Firebase storage methods\n   * @returns {firebase.database.Storage} Firebase storage service\n   */\n  /**\n   * @name auth\n   * @description Firebase auth service instance including all Firebase auth methods\n   * @returns {firebase.database.Auth}\n   */\n  firebaseInstance = Object.assign(firebase, {\n    _reactReduxFirebaseExtended: true,\n    ref: (path) => firebase.database().ref(path),\n    set,\n    setWithMeta,\n    uniqueSet,\n    push,\n    pushWithMeta,\n    remove,\n    update,\n    updateWithMeta,\n    login,\n    reauthenticate,\n    handleRedirectResult,\n    logout,\n    updateAuth,\n    updateEmail,\n    updateProfile,\n    uploadFile,\n    uploadFiles,\n    deleteFile,\n    createUser,\n    resetPassword,\n    confirmPasswordReset,\n    verifyPasswordResetCode,\n    applyActionCode,\n    watchEvent,\n    unWatchEvent,\n    reloadAuth,\n    linkWithCredential,\n    promiseEvents,\n    dispatch,\n    ...actionCreators\n  })\n  return firebaseInstance\n}\n\n/**\n * Get internal Firebase instance with methods which are wrapped with action dispatches. Useful for\n * integrations into external libraries such as redux-thunk and redux-observable.\n * @returns {object} Firebase instance with methods which dispatch redux actions\n * @see http://react-redux-firebase.com/api/getFirebase.html\n * @example <caption>redux-thunk integration</caption>\n * import { applyMiddleware, compose, createStore } from 'redux';\n * import thunk from 'redux-thunk';\n * import { getFirebase } from 'react-redux-firebase';\n * import makeRootReducer from './reducers';\n *\n * const fbConfig = {} // your firebase config\n *\n * const store = createStore(\n *   makeRootReducer(),\n *   initialState,\n *   compose(\n *     applyMiddleware([\n *       // Pass getFirebase function as extra argument\n *       thunk.withExtraArgument(getFirebase)\n *     ])\n *   )\n * );\n * // then later\n * export function addTodo(newTodo) {\n *   return (dispatch, getState, getFirebase) => {\n *     const firebase = getFirebase()\n *     firebase\n *       .push('todos', newTodo)\n *       .then(() => {\n *         dispatch({ type: 'SOME_ACTION' })\n *       })\n *   }\n * }\n */\nexport function getFirebase() {\n  /* istanbul ignore next: Firebase instance always exists during tests */\n  if (!firebaseInstance) {\n    throw new Error(\n      'Firebase instance does not yet exist. Check your compose function.'\n    ) // eslint-disable-line no-console\n  }\n  return firebaseInstance\n}\n"],"mappings":"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","ignoreList":[]}