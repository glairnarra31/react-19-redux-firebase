{"version":3,"file":"auth.js","names":["createAuthProvider","firebase","providerName","scopes","lowerCaseProviderName","toLowerCase","provider","auth","OAuthProvider","capitalProviderName","concat","_capitalize2","default","Error","customAuthParameters","_","config","setCustomParameters","addScope","Array","isArray","forEach","scope","String","getLoginMethodAndParams","credentials","email","password","type","token","phoneNumber","applicationVerifier","credential","emailLink","credentialAuth","signInAndRetrieveDataWithCredential","method","params","supportedAuthProviders","indexOf","authProvider","tokenAuth","signInAndRetrieveDataWithCustomToken","signInWithEmailAndPassword","getReauthenticateMethodAndParams","reauthenticateAndRetrieveDataWithCredential","isAuthReady","store","stateName","state","getState","firebaseState","firebaseAuthState","isLoaded","authIsReady","arguments","length","Promise","resolve","unsubscribe","subscribe","createAuthIsReady","firebaseStateName","updateProfileOnRTDB","profileUpdate","_firebase$_","authUid","profileRef","database","ref","userProfile","update","then","once","updateProfileOnFirestore","options","_options$useSet","useSet","_options$merge","merge","firestore","_firebase$_2","doc","profileUpdatePromise","set","get","setupPresence","dispatch","ServerValue","_firebase$_3","_firebase$_3$config","presence","sessions","amOnline","child","onlineRef","currentUser","sessionsRef","on","snapShot","val","actionTypes","SESSION_START","payload","session","push","startedAt","TIMESTAMP","user","setPriority","onDisconnect","SESSION_END","remove"],"sources":["../../src/utils/auth.js"],"sourcesContent":["import { capitalize } from 'lodash'\nimport { supportedAuthProviders, actionTypes } from '../constants'\n\n/**\n * @description Get correct login method and params order based on provided credentials\n * @param {object} firebase - Internal firebase object\n * @param {string} providerName - Name of Auth Provider (i.e. google, github, facebook, twitter)\n * @param {Array|string} scopes - List of scopes to add to auth provider\n * @returns {firebase.auth.AuthCredential} provider - Auth Provider\n * @private\n */\nfunction createAuthProvider(firebase, providerName, scopes) {\n  // TODO: Verify scopes are valid before adding\n  // TODO: Validate parameter inputs\n\n  const lowerCaseProviderName = providerName.toLowerCase()\n\n  if (\n    lowerCaseProviderName === 'microsoft.com' ||\n    lowerCaseProviderName === 'apple.com' ||\n    lowerCaseProviderName === 'yahoo.com'\n  ) {\n    const provider = new firebase.auth.OAuthProvider(providerName)\n    return provider\n  }\n\n  const capitalProviderName = `${capitalize(providerName)}AuthProvider`\n\n  // Throw if auth provider does not exist on Firebase instance\n  if (!firebase.auth[capitalProviderName]) {\n    throw new Error(\n      `${providerName} is not a valid auth provider for your firebase instance. If using react-native, use a RN specific auth library.`\n    )\n  }\n\n  const provider = new firebase.auth[capitalProviderName]()\n\n  // Custom Auth Parameters\n  // TODO: Validate parameter inputs\n  const { customAuthParameters } = firebase._.config\n  if (customAuthParameters && customAuthParameters[providerName]) {\n    provider.setCustomParameters(customAuthParameters[providerName])\n  }\n\n  // Handle providers without scopes\n  if (\n    lowerCaseProviderName === 'twitter' ||\n    typeof provider.addScope !== 'function'\n  ) {\n    return provider\n  }\n\n  // TODO: Verify scopes are valid before adding\n  provider.addScope('email')\n\n  if (scopes) {\n    if (Array.isArray(scopes)) {\n      scopes.forEach((scope) => {\n        provider.addScope(scope)\n      })\n    }\n    // Add single scope if it is a string\n    if (typeof scopes === 'string' || scopes instanceof String) {\n      provider.addScope(scopes)\n    }\n  }\n\n  return provider\n}\n\n/**\n * Get correct login method and params order based on provided\n * credentials\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.email - Email to login with (only needed for\n * email login)\n * @param {string} credentials.password - Password to login with (only needed\n * for email login)\n * @param {string} credentials.provider - Provider name such as google, twitter\n * (only needed for 3rd party provider login)\n * @param {string} credentials.type - Popup or redirect (only needed for 3rd\n * party provider login)\n * @param {string} credentials.token - Custom or provider token\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or\n * provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider\n * (i.e. email)\n * @returns {object} Method and params for calling login\n * @private\n */\nexport function getLoginMethodAndParams(firebase, credentials) {\n  const {\n    email,\n    password,\n    provider,\n    type,\n    token,\n    scopes,\n    phoneNumber,\n    applicationVerifier,\n    credential,\n    emailLink\n  } = credentials\n  // Credential Auth\n  if (credential) {\n    // Attempt to use signInAndRetrieveDataWithCredential if it exists (see #467 for more info)\n    const credentialAuth = firebase.auth().signInAndRetrieveDataWithCredential\n\n    if (credentialAuth) {\n      return {\n        method: 'signInAndRetrieveDataWithCredential',\n        params: [credential]\n      }\n    }\n    return { method: 'signInWithCredential', params: [credential] }\n  }\n\n  // Provider Auth\n  if (provider) {\n    // Verify providerName is valid\n    if (supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {\n      throw new Error(`${provider} is not a valid Auth Provider`)\n    }\n    if (token) {\n      throw new Error(\n        'provider with token no longer supported, use credential parameter instead'\n      )\n    }\n    const authProvider = createAuthProvider(firebase, provider, scopes)\n    if (type === 'popup') {\n      return { method: 'signInWithPopup', params: [authProvider] }\n    }\n    return { method: 'signInWithRedirect', params: [authProvider] }\n  }\n\n  // Token Auth\n  if (token) {\n    // Check for new sign in method (see #484 for more info)\n    const tokenAuth = firebase.auth().signInAndRetrieveDataWithCustomToken\n\n    if (tokenAuth) {\n      return { method: 'signInAndRetrieveDataWithCustomToken', params: [token] }\n    }\n\n    return { method: 'signInWithCustomToken', params: [token] }\n  }\n\n  // Phone Number Auth\n  if (phoneNumber) {\n    if (!applicationVerifier) {\n      throw new Error(\n        'Application verifier is required for phone authentication'\n      )\n    }\n    return {\n      method: 'signInWithPhoneNumber',\n      params: [phoneNumber, applicationVerifier]\n    }\n  }\n\n  // Passwordless sign-in\n  if (emailLink && email) {\n    return { method: 'signInWithEmailLink', params: [email, emailLink] }\n  }\n\n  // Check for new sign in method (see #484 for more info)\n  // Note: usage of signInAndRetrieveDataWithEmailAndPassword is now a fallback since it is deprecated (see #484 for more info)\n  if (!firebase.auth().signInWithEmailAndPassword) {\n    return {\n      method: 'signInAndRetrieveDataWithEmailAndPassword',\n      params: [email, password]\n    }\n  }\n\n  // Email/Password Auth\n  return { method: 'signInWithEmailAndPassword', params: [email, password] }\n}\n\n/**\n * Get correct reauthenticate method and params order based on provided\n * credentials\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.provider - Provider name such as google, twitter\n * (only needed for 3rd party provider login)\n * @param {string} credentials.type - Popup or redirect (only needed for 3rd\n * party provider login)\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or\n * provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider\n * (i.e. email)\n * @returns {object} Method and params for calling login\n * @private\n */\nexport function getReauthenticateMethodAndParams(firebase, credentials) {\n  const {\n    provider,\n    type,\n    scopes,\n    phoneNumber,\n    applicationVerifier,\n    credential\n  } = credentials\n  // Credential Auth\n  if (credential) {\n    // Attempt to use signInAndRetrieveDataWithCredential if it exists (see #467 for more info)\n    const credentialAuth = firebase.auth()\n      .reauthenticateAndRetrieveDataWithCredential\n\n    if (credentialAuth) {\n      return {\n        method: 'reauthenticateAndRetrieveDataWithCredential',\n        params: [credential]\n      }\n    }\n    return { method: 'reauthenticateWithCredential', params: [credential] }\n  }\n\n  // Provider Auth\n  if (provider) {\n    // Verify providerName is valid\n    if (supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {\n      throw new Error(`${provider} is not a valid Auth Provider`)\n    }\n    const authProvider = createAuthProvider(firebase, provider, scopes)\n    if (type === 'popup') {\n      return { method: 'reauthenticateWithPopup', params: [authProvider] }\n    }\n    return { method: 'reauthenticateWithRedirect', params: [authProvider] }\n  }\n\n  // Phone Number Auth\n  if (!applicationVerifier) {\n    throw new Error('Application verifier is required for phone authentication')\n  }\n  return {\n    method: 'reauthenticateWithPhoneNumber',\n    params: [phoneNumber, applicationVerifier]\n  }\n}\n\n/**\n * Returns a promise that completes when Firebase Auth is ready in the given\n * store using react-redux-firebase.\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {string} [stateName='firebase'] - The attribute name of the\n * react-redux-firebase reducer when using multiple combined reducers.\n * 'firebase' by default. Set this to `null` to indicate that the\n * react-redux-firebase reducer is not in a combined reducer.\n * @returns {Promise} Resolves when Firebase auth is ready in the store.\n */\nfunction isAuthReady(store, stateName) {\n  const state = store.getState()\n  const firebaseState = stateName ? state[stateName] : state\n  const firebaseAuthState = firebaseState && firebaseState.auth\n  if (!firebaseAuthState) {\n    throw new Error(\n      `The Firebase auth state could not be found in the store under the attribute '${\n        stateName ? `${stateName}.` : ''\n      }auth'. Make sure your react-redux-firebase reducer is correctly set in the store`\n    )\n  }\n  return firebaseState.auth.isLoaded\n}\n\n/**\n * Returns a promise that completes when Firebase Auth is ready in the given\n * store using react-redux-firebase.\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {string} [stateName='firebase'] - The attribute name of the react-redux-firebase\n * reducer when using multiple combined reducers. 'firebase' by default. Set\n * this to `null` to indicate that the react-redux-firebase reducer is not in a\n * combined reducer.\n * @returns {Promise} Resolve when Firebase auth is ready in the store.\n */\nexport function authIsReady(store, stateName = 'firebase') {\n  return new Promise((resolve) => {\n    if (isAuthReady(store, stateName)) {\n      resolve()\n    } else {\n      const unsubscribe = store.subscribe(() => {\n        if (isAuthReady(store, stateName)) {\n          unsubscribe()\n          resolve()\n        }\n      })\n    }\n  })\n}\n\n/**\n * Function that creates and authIsReady promise\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {object} config - Config options for authIsReady\n * @param {string} config.authIsReady - Config options for authIsReady\n * @param {string} config.firebaseStateName - Config options for authIsReady\n * @returns {Promise} Resolves when Firebase auth is ready in the store.\n */\nexport function createAuthIsReady(store, config) {\n  return typeof config.authIsReady === 'function'\n    ? config.authIsReady(store, config)\n    : authIsReady(store, config.firebaseStateName)\n}\n\n/**\n * Update profile data on Firebase Real Time Database\n * @param {object} firebase - internal firebase object\n * @param {object} profileUpdate - Updates to profile object\n * @returns {Promise} Resolves with results of profile get\n */\nexport function updateProfileOnRTDB(firebase, profileUpdate) {\n  const {\n    _: { config, authUid }\n  } = firebase\n  const profileRef = firebase.database().ref(`${config.userProfile}/${authUid}`)\n  return profileRef.update(profileUpdate).then(() => profileRef.once('value'))\n}\n\n/**\n * Update profile data on Firestore by calling set (with merge: true) on\n * the profile.\n * @param {object} firebase - internal firebase object\n * @param {object} profileUpdate - Updates to profile object\n * @param {object} options - Options object for configuring how profile\n * update occurs\n * @param {boolean} [options.useSet=true] - Use set with merge instead of\n * update. Setting to `false` uses update (can cause issue if profile document\n * does not exist).\n * @param {boolean} [options.merge=true] - Whether or not to use merge when\n * setting profile\n * @returns {Promise} Resolves with results of profile get\n */\nexport function updateProfileOnFirestore(\n  firebase,\n  profileUpdate,\n  options = {}\n) {\n  const { useSet = true, merge = true } = options\n  const {\n    firestore,\n    _: { config, authUid }\n  } = firebase\n  const profileRef = firestore().doc(`${config.userProfile}/${authUid}`)\n  // Use set with merge (to prevent \"No document to update\") unless otherwise\n  // specificed through options\n  const profileUpdatePromise = useSet\n    ? profileRef.set(profileUpdate, { merge })\n    : profileRef.update(profileUpdate)\n  return profileUpdatePromise.then(() => profileRef.get())\n}\n\n/**\n * Start presence management for a specificed user uid.\n * Presence collection contains a list of users that are online currently.\n * Sessions collection contains a record of all user sessions.\n * This function is called within login functions if enablePresence: true.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport function setupPresence(dispatch, firebase) {\n  // exit if database does not exist on firebase instance\n  if (!firebase.database || !firebase.database.ServerValue) {\n    return\n  }\n  const ref = firebase.database().ref()\n  const {\n    config: { presence, sessions },\n    authUid\n  } = firebase._\n  const amOnline = ref.child('.info/connected')\n  const onlineRef = ref\n    .child(\n      typeof presence === 'function'\n        ? presence(firebase.auth().currentUser, firebase)\n        : presence\n    )\n    .child(authUid)\n  let sessionsRef =\n    typeof sessions === 'function'\n      ? sessions(firebase.auth().currentUser, firebase)\n      : sessions\n  if (sessionsRef) {\n    sessionsRef = ref.child(sessions)\n  }\n  amOnline.on('value', (snapShot) => {\n    if (!snapShot.val()) return\n    // user is online\n    if (sessionsRef) {\n      // add session and set disconnect\n      dispatch({ type: actionTypes.SESSION_START, payload: authUid })\n      // add new session to sessions collection\n      const session = sessionsRef.push({\n        startedAt: firebase.database.ServerValue.TIMESTAMP,\n        user: authUid\n      })\n      // Support versions of react-native-firebase that do not have setPriority\n      // on firebase.database.ThenableReference\n      if (typeof session.setPriority === 'function') {\n        // set authUid as priority for easy sorting\n        session.setPriority(authUid)\n      }\n      session\n        .child('endedAt')\n        .onDisconnect()\n        .set(firebase.database.ServerValue.TIMESTAMP, () => {\n          dispatch({ type: actionTypes.SESSION_END })\n        })\n    }\n    // add correct session id to user\n    // remove from presence list\n    onlineRef.set(true)\n    onlineRef.onDisconnect().remove()\n  })\n}\n"],"mappings":"ilBAWA,QAAS,CAAAA,kBAAkBA,CAACC,QAAQ,CAAEC,YAAY,CAAEC,MAAM,CAAE,CAI1D,GAAM,CAAAC,qBAAqB,CAAGF,YAAY,CAACG,WAAW,CAAC,CAAC,CAExD,GAC4B,eAAe,GAAzCD,qBAAyC,EACf,WAAW,GAArCA,qBAAqC,EACX,WAAW,GAArCA,qBAAqC,CACrC,CACA,GAAM,CAAAE,SAAQ,CAAG,GAAI,CAAAL,QAAQ,CAACM,IAAI,CAACC,aAAa,CAACN,YAAY,CAAC,CAC9D,MAAO,CAAAI,SACT,CAEA,GAAM,CAAAG,mBAAmB,IAAAC,MAAA,CAAM,GAAAC,YAAA,CAAAC,OAAA,EAAWV,YAAY,CAAC,gBAAc,CAGrE,GAAI,CAACD,QAAQ,CAACM,IAAI,CAACE,mBAAmB,CAAC,CACrC,KAAM,IAAI,CAAAI,KAAK,IAAAH,MAAA,CACVR,YAAY,oHACjB,CAAC,CACF,GAEK,CAAAI,QAAQ,CAAG,GAAI,CAAAL,QAAQ,CAACM,IAAI,CAACE,mBAAmB,CAAG,CAIjDK,oBAAoB,CAAKb,QAAQ,CAACc,CAAC,CAACC,MAAM,CAA1CF,oBAAoB,QACxBA,oBAAoB,EAAIA,oBAAoB,CAACZ,YAAY,CAAC,EAC5DI,QAAQ,CAACW,mBAAmB,CAACH,oBAAoB,CAACZ,YAAY,CAAC,CAAC,CAKtC,SAAS,GAAnCE,qBAAmC,EACN,UAAU,EAAvC,MAAO,CAAAE,QAAQ,CAACY,QAAuB,EAEhCZ,QAAQ,EAIjBA,QAAQ,CAACY,QAAQ,CAAC,OAAO,CAAC,CAEtBf,MAAM,GACJgB,KAAK,CAACC,OAAO,CAACjB,MAAM,CAAC,EACvBA,MAAM,CAACkB,OAAO,CAAC,SAACC,KAAK,CAAK,CACxBhB,QAAQ,CAACY,QAAQ,CAACI,KAAK,CACzB,CAAC,CAAC,EAGkB,QAAQ,EAA1B,MAAO,CAAAnB,MAAmB,EAAIA,MAAM,WAAY,CAAAoB,MAAM,GACxDjB,QAAQ,CAACY,QAAQ,CAACf,MAAM,CAAC,EAItBG,QAAQ,CACjB,CAuBO,QAAS,CAAAkB,uBAAuBA,CAACvB,QAAQ,CAAEwB,WAAW,CAAE,CAC7D,GACE,CAAAC,KAAK,CAUHD,WAAW,CAVbC,KAAK,CACLC,QAAQ,CASNF,WAAW,CATbE,QAAQ,CACRrB,QAAQ,CAQNmB,WAAW,CARbnB,QAAQ,CACRsB,IAAI,CAOFH,WAAW,CAPbG,IAAI,CACJC,KAAK,CAMHJ,WAAW,CANbI,KAAK,CACL1B,MAAM,CAKJsB,WAAW,CALbtB,MAAM,CACN2B,WAAW,CAITL,WAAW,CAJbK,WAAW,CACXC,mBAAmB,CAGjBN,WAAW,CAHbM,mBAAmB,CACnBC,UAAU,CAERP,WAAW,CAFbO,UAAU,CACVC,SAAS,CACPR,WAAW,CADbQ,SAAS,CAGX,GAAID,UAAU,CAAE,CAEd,GAAM,CAAAE,cAAc,CAAGjC,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC4B,mCAAmC,OAEtE,CAAAD,cAAc,CACT,CACLE,MAAM,CAAE,qCAAqC,CAC7CC,MAAM,CAAE,CAACL,UAAU,CACrB,CAAC,CAEI,CAAEI,MAAM,CAAE,sBAAsB,CAAEC,MAAM,CAAE,CAACL,UAAU,CAAE,CAChE,CAGA,GAAI1B,QAAQ,CAAE,CAEZ,GAA+D,CAAC,CAAC,GAA7DgC,iCAAsB,CAACC,OAAO,CAACjC,QAAQ,CAACD,WAAW,CAAC,CAAC,CAAQ,CAC/D,KAAM,IAAI,CAAAQ,KAAK,IAAAH,MAAA,CAAIJ,QAAQ,iCAA+B,CAAC,CAE7D,GAAIuB,KAAK,CACP,KAAM,IAAI,CAAAhB,KAAK,CACb,2EACF,CAAC,CAEH,GAAM,CAAA2B,YAAY,CAAGxC,kBAAkB,CAACC,QAAQ,CAAEK,QAAQ,CAAEH,MAAM,CAAC,OACtD,OAAO,GAAhByB,IAAgB,CACX,CAAEQ,MAAM,CAAE,iBAAiB,CAAEC,MAAM,CAAE,CAACG,YAAY,CAAE,CAAC,CAEvD,CAAEJ,MAAM,CAAE,oBAAoB,CAAEC,MAAM,CAAE,CAACG,YAAY,CAAE,CAChE,CAGA,GAAIX,KAAK,CAAE,CAET,GAAM,CAAAY,SAAS,CAAGxC,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACmC,oCAAoC,OAElE,CAAAD,SAAS,CACJ,CAAEL,MAAM,CAAE,sCAAsC,CAAEC,MAAM,CAAE,CAACR,KAAK,CAAE,CAAC,CAGrE,CAAEO,MAAM,CAAE,uBAAuB,CAAEC,MAAM,CAAE,CAACR,KAAK,CAAE,CAC5D,CAGA,GAAIC,WAAW,CAAE,CACf,GAAI,CAACC,mBAAmB,CACtB,KAAM,IAAI,CAAAlB,KAAK,CACb,2DACF,CAAC,CAEH,MAAO,CACLuB,MAAM,CAAE,uBAAuB,CAC/BC,MAAM,CAAE,CAACP,WAAW,CAAEC,mBAAmB,CAC3C,CACF,CAAC,MAGG,CAAAE,SAAS,EAAIP,KAAK,CACb,CAAEU,MAAM,CAAE,qBAAqB,CAAEC,MAAM,CAAE,CAACX,KAAK,CAAEO,SAAS,CAAE,CAAC,CAKjEhC,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACoC,0BAA0B,CAQxC,CAAEP,MAAM,CAAE,4BAA4B,CAAEC,MAAM,CAAE,CAACX,KAAK,CAAEC,QAAQ,CAAE,CAAC,CAPjE,CACLS,MAAM,CAAE,2CAA2C,CACnDC,MAAM,CAAE,CAACX,KAAK,CAAEC,QAAQ,CAC1B,CAKJ,CAkBO,QAAS,CAAAiB,gCAAgCA,CAAC3C,QAAQ,CAAEwB,WAAW,CAAE,CACtE,GACE,CAAAnB,QAAQ,CAMNmB,WAAW,CANbnB,QAAQ,CACRsB,IAAI,CAKFH,WAAW,CALbG,IAAI,CACJzB,MAAM,CAIJsB,WAAW,CAJbtB,MAAM,CACN2B,WAAW,CAGTL,WAAW,CAHbK,WAAW,CACXC,mBAAmB,CAEjBN,WAAW,CAFbM,mBAAmB,CACnBC,UAAU,CACRP,WAAW,CADbO,UAAU,CAGZ,GAAIA,UAAU,CAAE,CAEd,GAAM,CAAAE,cAAc,CAAGjC,QAAQ,CAACM,IAAI,CAAC,CAAC,CACnCsC,2CAA2C,OAE1C,CAAAX,cAAc,CACT,CACLE,MAAM,CAAE,6CAA6C,CACrDC,MAAM,CAAE,CAACL,UAAU,CACrB,CAAC,CAEI,CAAEI,MAAM,CAAE,8BAA8B,CAAEC,MAAM,CAAE,CAACL,UAAU,CAAE,CACxE,CAGA,GAAI1B,QAAQ,CAAE,CAEZ,GAA+D,CAAC,CAAC,GAA7DgC,iCAAsB,CAACC,OAAO,CAACjC,QAAQ,CAACD,WAAW,CAAC,CAAC,CAAQ,CAC/D,KAAM,IAAI,CAAAQ,KAAK,IAAAH,MAAA,CAAIJ,QAAQ,iCAA+B,CAAC,CAE7D,GAAM,CAAAkC,YAAY,CAAGxC,kBAAkB,CAACC,QAAQ,CAAEK,QAAQ,CAAEH,MAAM,CAAC,OACtD,OAAO,GAAhByB,IAAgB,CACX,CAAEQ,MAAM,CAAE,yBAAyB,CAAEC,MAAM,CAAE,CAACG,YAAY,CAAE,CAAC,CAE/D,CAAEJ,MAAM,CAAE,4BAA4B,CAAEC,MAAM,CAAE,CAACG,YAAY,CAAE,CACxE,CAGA,GAAI,CAACT,mBAAmB,CACtB,KAAM,IAAI,CAAAlB,KAAK,CAAC,2DAA2D,CAAC,CAE9E,MAAO,CACLuB,MAAM,CAAE,+BAA+B,CACvCC,MAAM,CAAE,CAACP,WAAW,CAAEC,mBAAmB,CAC3C,CACF,CAaA,QAAS,CAAAe,WAAWA,CAACC,KAAK,CAAEC,SAAS,CAAE,IAC/B,CAAAC,KAAK,CAAGF,KAAK,CAACG,QAAQ,CAAC,CAAC,CACxBC,aAAa,CAAGH,SAAS,CAAGC,KAAK,CAACD,SAAS,CAAC,CAAGC,KAAK,CACpDG,iBAAiB,CAAGD,aAAa,EAAIA,aAAa,CAAC5C,IAAI,CAC7D,GAAI,CAAC6C,iBAAiB,CACpB,KAAM,IAAI,CAAAvC,KAAK,iFAAAH,MAAA,CAEXsC,SAAS,IAAAtC,MAAA,CAAMsC,SAAS,MAAM,EAAE,oFAEpC,CAAC,CAEH,MAAO,CAAAG,aAAa,CAAC5C,IAAI,CAAC8C,QAC5B,CAaO,QAAS,CAAAC,WAAWA,CAACP,KAAK,CAA0B,IAAxB,CAAAC,SAAS,GAAAO,SAAA,CAAAC,MAAA,EAAAD,SAAA,aAAAA,SAAA,IAAG,UAAU,CACvD,MAAO,IAAI,CAAAE,OAAO,CAAC,SAACC,OAAO,CAAK,CAC9B,GAAIZ,WAAW,CAACC,KAAK,CAAEC,SAAS,CAAC,CAC/BU,OAAO,CAAC,CAAC,KAET,IAAM,CAAAC,WAAW,CAAGZ,KAAK,CAACa,SAAS,CAAC,UAAM,CACpCd,WAAW,CAACC,KAAK,CAAEC,SAAS,CAAC,GAC/BW,WAAW,CAAC,CAAC,CACbD,OAAO,CAAC,CAAC,CAEb,CAAC,CAEL,CAAC,CACH,CAWO,QAAS,CAAAG,iBAAiBA,CAACd,KAAK,CAAE/B,MAAM,CAAE,CAC/C,MAAqC,UAAU,EAAxC,MAAO,CAAAA,MAAM,CAACsC,WAA0B,CAC3CtC,MAAM,CAACsC,WAAW,CAACP,KAAK,CAAE/B,MAAM,CAAC,CACjCsC,WAAW,CAACP,KAAK,CAAE/B,MAAM,CAAC8C,iBAAiB,CACjD,CAQO,QAAS,CAAAC,mBAAmBA,CAAC9D,QAAQ,CAAE+D,aAAa,CAAE,KAAAC,WAAA,CAGvDhE,QAAQ,CADVc,CAAC,CAAIC,MAAM,CAAAiD,WAAA,CAANjD,MAAM,CAAEkD,OAAO,CAAAD,WAAA,CAAPC,OAAO,CAEhBC,UAAU,CAAGlE,QAAQ,CAACmE,QAAQ,CAAC,CAAC,CAACC,GAAG,IAAA3D,MAAA,CAAIM,MAAM,CAACsD,WAAW,MAAA5D,MAAA,CAAIwD,OAAO,CAAE,CAAC,CAC9E,MAAO,CAAAC,UAAU,CAACI,MAAM,CAACP,aAAa,CAAC,CAACQ,IAAI,CAAC,iBAAM,CAAAL,UAAU,CAACM,IAAI,CAAC,OAAO,CAAC,EAC7E,CAgBO,QAAS,CAAAC,wBAAwBA,CACtCzE,QAAQ,CACR+D,aAAa,CAEb,IADA,CAAAW,OAAO,GAAApB,SAAA,CAAAC,MAAA,EAAAD,SAAA,aAAAA,SAAA,IAAG,CAAC,CAAC,CAAAqB,eAAA,CAE4BD,OAAO,CAAvCE,MAAM,CAAAC,cAAA,CAA0BH,OAAO,CAAxBI,KAAK,CAE1BC,SAAS,CAEP/E,QAAQ,CAFV+E,SAAS,CAAAC,YAAA,CAEPhF,QAAQ,CADVc,CAAC,CAAIC,MAAM,CAAAiE,YAAA,CAANjE,MAAM,CAAEkD,OAAO,CAAAe,YAAA,CAAPf,OAAO,CAEhBC,UAAU,CAAGa,SAAS,CAAC,CAAC,CAACE,GAAG,IAAAxE,MAAA,CAAIM,MAAM,CAACsD,WAAW,MAAA5D,MAAA,CAAIwD,OAAO,CAAE,CAAC,CAGhEiB,oBAAoB,CAAG,WAAAP,eAAA,GAAAA,eAAA,CACzBT,UAAU,CAACiB,GAAG,CAACpB,aAAa,CAAE,CAAEe,KAAK,YAAAD,cAAA,GAAAA,cAAC,CAAC,CAAC,CACxCX,UAAU,CAACI,MAAM,CAACP,aAAa,CAAC,CACpC,MAAO,CAAAmB,oBAAoB,CAACX,IAAI,CAAC,iBAAM,CAAAL,UAAU,CAACkB,GAAG,CAAC,CAAC,EACzD,CAWO,QAAS,CAAAC,aAAaA,CAACC,QAAQ,CAAEtF,QAAQ,CAAE,CAEhD,GAAKA,QAAQ,CAACmE,QAAQ,EAAKnE,QAAQ,CAACmE,QAAQ,CAACoB,WAAW,KAGlD,CAAAnB,GAAG,CAAGpE,QAAQ,CAACmE,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAAoB,YAAA,CAIjCxF,QAAQ,CAACc,CAAC,CAAA2E,mBAAA,CAAAD,YAAA,CAFZzE,MAAM,CAAI2E,QAAQ,CAAAD,mBAAA,CAARC,QAAQ,CAAEC,QAAQ,CAAAF,mBAAA,CAARE,QAAQ,CAC5B1B,OAAO,CAAAuB,YAAA,CAAPvB,OAAO,CAEH2B,QAAQ,CAAGxB,GAAG,CAACyB,KAAK,CAAC,iBAAiB,CAAC,CACvCC,SAAS,CAAG1B,GAAG,CAClByB,KAAK,CACgB,UAAU,EAA9B,MAAO,CAAAH,QAAuB,CAC1BA,QAAQ,CAAC1F,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACyF,WAAW,CAAE/F,QAAQ,CAAC,CAC/C0F,QACN,CAAC,CACAG,KAAK,CAAC5B,OAAO,CAAC,CACb+B,WAAW,CACO,UAAU,EAA9B,MAAO,CAAAL,QAAuB,CAC1BA,QAAQ,CAAC3F,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACyF,WAAW,CAAE/F,QAAQ,CAAC,CAC/C2F,QAAQ,CACVK,WAAW,GACbA,WAAW,CAAG5B,GAAG,CAACyB,KAAK,CAACF,QAAQ,CAAC,EAEnCC,QAAQ,CAACK,EAAE,CAAC,OAAO,CAAE,SAACC,QAAQ,CAAK,CACjC,GAAKA,QAAQ,CAACC,GAAG,CAAC,CAAC,EAEnB,GAAIH,WAAW,CAAE,CAEfV,QAAQ,CAAC,CAAE3D,IAAI,CAAEyE,sBAAW,CAACC,aAAa,CAAEC,OAAO,CAAErC,OAAQ,CAAC,CAAC,CAE/D,GAAM,CAAAsC,OAAO,CAAGP,WAAW,CAACQ,IAAI,CAAC,CAC/BC,SAAS,CAAEzG,QAAQ,CAACmE,QAAQ,CAACoB,WAAW,CAACmB,SAAS,CAClDC,IAAI,CAAE1C,OACR,CAAC,CAAC,CAGiC,UAAU,EAAzC,MAAO,CAAAsC,OAAO,CAACK,WAA0B,EAE3CL,OAAO,CAACK,WAAW,CAAC3C,OAAO,CAAC,CAE9BsC,OAAO,CACJV,KAAK,CAAC,SAAS,CAAC,CAChBgB,YAAY,CAAC,CAAC,CACd1B,GAAG,CAACnF,QAAQ,CAACmE,QAAQ,CAACoB,WAAW,CAACmB,SAAS,CAAE,UAAM,CAClDpB,QAAQ,CAAC,CAAE3D,IAAI,CAAEyE,sBAAW,CAACU,WAAY,CAAC,CAC5C,CAAC,CACL,CAGAhB,SAAS,CAACX,GAAG,GAAK,CAAC,CACnBW,SAAS,CAACe,YAAY,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC,CACnC,CAAC,CAAC,CACJ","ignoreList":[]}