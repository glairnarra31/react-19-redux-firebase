{"version":3,"file":"events.js","names":["pathStrToObj","path","pathObj","type","isQuery","queryId","getQueryIdFromPath","pathArray","split","Object","assign","queryParams","getPopulates","populates","_remove2","default","p","indexOf","getEventsFromInput","paths","_flatMap2","String","Array","isArray","_isObject2","Error","strPath","storeAs","concat","join","_default","exports"],"sources":["../../src/utils/events.js"],"sourcesContent":["import { flatMap, isObject, remove } from 'lodash'\nimport { getPopulates } from './populate'\nimport { getQueryIdFromPath } from './query'\n\n/**\n * @description Convert path string to object with queryParams, path, and populates\n * @param {string} path - Path that can contain query parameters and populates\n * @returns {object} watchEvents - Array of watch events\n */\nexport function pathStrToObj(path) {\n  let pathObj = { path, type: 'value', isQuery: false }\n  const queryId = getQueryIdFromPath(path)\n  // If Query id exists split params from path\n  if (queryId) {\n    const pathArray = path.split('#')\n    pathObj = Object.assign({}, pathObj, {\n      queryId,\n      isQuery: true,\n      path: pathArray[0],\n      queryParams: pathArray[1].split('&')\n    })\n    if (getPopulates(pathArray[1].split('&'))) {\n      pathObj.populates = getPopulates(pathArray[1].split('&'))\n      pathObj.queryParams = remove(\n        pathArray[1].split('&'),\n        (p) => p.indexOf('populate') === -1\n      )\n    }\n  }\n  // if queryId does not exist, return original pathObj\n  return pathObj\n}\n\n/**\n * @description Convert watch path definition array to watch events\n * @param {Array} paths - Array of path strings, objects, and arrays to watch\n * @returns {Array} watchEvents - Array of watch events\n */\nexport function getEventsFromInput(paths) {\n  return flatMap(paths, (path) => {\n    // If path is a string - convert to obj and place within new array\n    if (typeof path === 'string' || path instanceof String) {\n      return [pathStrToObj(path)]\n    }\n\n    if (Array.isArray(path)) {\n      // TODO: Handle input other than array with string\n      // TODO: Handle populates within array\n      return [\n        { type: 'first_child', path: path[0] },\n        { type: 'child_added', path: path[0] },\n        { type: 'child_removed', path: path[0] },\n        { type: 'child_moved', path: path[0] },\n        { type: 'child_changed', path: path[0] }\n      ]\n    }\n\n    if (isObject(path)) {\n      if (!path.path) {\n        throw new Error('Path is a required parameter within definition object')\n      }\n      let strPath = path.path\n\n      if (path.storeAs) {\n        // append storeAs to query path\n        strPath += `@${path.storeAs}`\n      }\n\n      if (path.queryParams) {\n        // append query params to path for queryId added in pathStrToObj\n        strPath += `#${path.queryParams.join('&')}`\n      }\n\n      // Add all parameters that are missing (ones that exist will remain)\n      path = Object.assign({}, pathStrToObj(strPath), path)\n      return [path]\n    }\n\n    throw new Error(\n      `Invalid Path Definition: ${path}. Only strings, objects, and arrays accepted.`\n    )\n  })\n}\n\nexport default { getEventsFromInput }\n"],"mappings":"qeASO,QAAS,CAAAA,YAAYA,CAACC,IAAI,CAAE,IAC7B,CAAAC,OAAO,CAAG,CAAED,IAAI,CAAJA,IAAI,CAAEE,IAAI,CAAE,OAAO,CAAEC,OAAO,GAAQ,CAAC,CAC/CC,OAAO,CAAG,GAAAC,yBAAkB,EAACL,IAAI,CAAC,CAExC,GAAII,OAAO,CAAE,CACX,GAAM,CAAAE,SAAS,CAAGN,IAAI,CAACO,KAAK,CAAC,GAAG,CAAC,CACjCN,OAAO,CAAGO,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAER,OAAO,CAAE,CACnCG,OAAO,CAAPA,OAAO,CACPD,OAAO,GAAM,CACbH,IAAI,CAAEM,SAAS,CAAC,CAAC,CAAC,CAClBI,WAAW,CAAEJ,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CACrC,CAAC,CAAC,CACE,GAAAI,sBAAY,EAACL,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,GACvCN,OAAO,CAACW,SAAS,CAAG,GAAAD,sBAAY,EAACL,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CACzDN,OAAO,CAACS,WAAW,CAAG,GAAAG,QAAA,CAAAC,OAAA,EACpBR,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CACvB,SAACQ,CAAC,QAA+B,CAAC,CAAC,GAA5BA,CAAC,CAACC,OAAO,CAAC,UAAU,CAAQ,CACrC,CAAC,CAEL,CAEA,MAAO,CAAAf,OACT,CAOO,QAAS,CAAAgB,kBAAkBA,CAACC,KAAK,CAAE,CACxC,MAAO,GAAAC,SAAA,CAAAL,OAAA,EAAQI,KAAK,CAAE,SAAClB,IAAI,CAAK,CAE9B,GAAoB,QAAQ,EAAxB,MAAO,CAAAA,IAAiB,EAAIA,IAAI,WAAY,CAAAoB,MAAM,CACpD,MAAO,CAACrB,YAAY,CAACC,IAAI,CAAC,CAAC,CAG7B,GAAIqB,KAAK,CAACC,OAAO,CAACtB,IAAI,CAAC,CAGrB,MAAO,CACL,CAAEE,IAAI,CAAE,aAAa,CAAEF,IAAI,CAAEA,IAAI,CAAC,CAAC,CAAE,CAAC,CACtC,CAAEE,IAAI,CAAE,aAAa,CAAEF,IAAI,CAAEA,IAAI,CAAC,CAAC,CAAE,CAAC,CACtC,CAAEE,IAAI,CAAE,eAAe,CAAEF,IAAI,CAAEA,IAAI,CAAC,CAAC,CAAE,CAAC,CACxC,CAAEE,IAAI,CAAE,aAAa,CAAEF,IAAI,CAAEA,IAAI,CAAC,CAAC,CAAE,CAAC,CACtC,CAAEE,IAAI,CAAE,eAAe,CAAEF,IAAI,CAAEA,IAAI,CAAC,CAAC,CAAE,CAAC,CACzC,CAGH,GAAI,GAAAuB,UAAA,CAAAT,OAAA,EAASd,IAAI,CAAC,CAAE,CAClB,GAAI,CAACA,IAAI,CAACA,IAAI,CACZ,KAAM,IAAI,CAAAwB,KAAK,CAAC,uDAAuD,CAAC,CAE1E,GAAI,CAAAC,OAAO,CAAGzB,IAAI,CAACA,IAAI,CAcvB,MAZI,CAAAA,IAAI,CAAC0B,OAAO,GAEdD,OAAO,MAAAE,MAAA,CAAQ3B,IAAI,CAAC0B,OAAO,CAAE,EAG3B1B,IAAI,CAACU,WAAW,GAElBe,OAAO,MAAAE,MAAA,CAAQ3B,IAAI,CAACU,WAAW,CAACkB,IAAI,CAAC,GAAG,CAAC,CAAE,EAI7C5B,IAAI,CAAGQ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAEV,YAAY,CAAC0B,OAAO,CAAC,CAAEzB,IAAI,CAAC,CAC9C,CAACA,IAAI,CACd,CAEA,KAAM,IAAI,CAAAwB,KAAK,6BAAAG,MAAA,CACe3B,IAAI,iDAClC,CACF,CAAC,CACH,CAAC,IAAA6B,QAAA,CAAAC,OAAA,CAAAhB,OAAA,CAEc,CAAEG,kBAAkB,CAAlBA,kBAAmB,CAAC","ignoreList":[]}