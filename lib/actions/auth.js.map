{"version":3,"file":"auth.js","names":["dispatchLoginError","dispatch","authError","params","arguments","length","_objectSpread","type","actionTypes","LOGIN_ERROR","unWatchUserProfile","firebase","_firebase$_","_","authUid","_firebase$_$config","config","userProfile","useFirestoreForProfile","profileWatch","firestore","database","ref","child","concat","off","getProfileFromSnap","snap","val","data","exists","handleProfileWatchResponse","userProfileSnap","token","_firebase$_$config2","profileParamsToPopulate","autoPopulateProfile","logErrors","profile","Array","isArray","isString","promisesForPopulate","key","then","_forEach2","default","result","path","SET","timestamp","Date","now","requesting","requested","SET_PROFILE","populates","getPopulateObjs","populate","catch","err","console","error","UNAUTHORIZED_ERROR","message","warn","createProfileWatchErrorHandler","_firebase$_$config3","onProfileListenerError","factoryResult","Promise","reject","watchUserProfile","exports","_firebase$_2","_firebase$_2$config","enableClaims","auth","currentUser","getIdTokenResult","collection","doc","onSnapshot","on","Error","createUserProfile","userData","resolve","profileFactory","uid","user","get","profileSnap","updateProfileOnLogin","newProfile","userDataObject","toJSON","_omit2","keysToRemoveFromAuth","avatarUrl","photoURL","providerData","map","providerDataItem","_pick2","keysToPreserveFromProviderData","set","merge","once","update","onProfileWriteError","handleAuthStateChange","authData","presence","setupPresence","LOGIN","preserve","preserveOnLogin","onAuthStateChanged","AUTH_EMPTY_CHANGE","preserveOnEmptyAuthChange","handleRedirectResult","onRedirectResult","email","displayName","init","AUTHENTICATION_INIT_STARTED","enableRedirectHandling","getRedirectResult","window","location","protocol","indexOf","AUTHENTICATION_INIT_FINISHED","login","credentials","_firebase$auth","resetBeforeLogin","_getLoginMethodAndPar","getLoginMethodAndParams","method","apply","_toConsumableArray","includes","confirm","code","_ref","additionalUserInfo","phoneNumber","reauthenticate","_firebase$auth$curren","_getReauthenticateMet","getReauthenticateMethodAndParams","_ref2","logout","signOut","action","LOGOUT","preserveOnLogout","createUser","_ref3","password","createUserWithEmailAndPassword","resetPassword","sendPasswordResetEmail","confirmPasswordReset","verifyPasswordResetCode","applyActionCode","updateProfile","profileUpdate","options","PROFILE_UPDATE_START","payload","updatePromise","updateProfileOnFirestore","updateProfileOnRTDB","PROFILE_UPDATE_SUCCESS","PROFILE_UPDATE_ERROR","updateAuth","authUpdate","updateInProfile","AUTH_UPDATE_START","AUTH_UPDATE_ERROR","AUTH_UPDATE_SUCCESS","updateEmail","newEmail","EMAIL_UPDATE_START","EMAIL_UPDATE_ERROR","EMAIL_UPDATE_SUCCESS","reloadAuth","AUTH_RELOAD_START","AUTH_RELOAD_ERROR","reload","AUTH_RELOAD_SUCCESS","linkWithCredential","credential","AUTH_LINK_START","AUTH_LINK_ERROR","AUTH_LINK_SUCCESS","linkWithAuthDispatch","promiseFunc","args","linkAndRetrieveDataWithCredential","linkWithPopup","linkWithRedirect","provider","signInWithPhoneNumber","applicationVerifier"],"sources":["../../src/actions/auth.js"],"sourcesContent":["import { forEach, omit, pick } from 'lodash'\nimport { actionTypes } from '../constants'\nimport { populate } from '../helpers'\nimport { isString } from '../utils'\nimport {\n  getLoginMethodAndParams,\n  getReauthenticateMethodAndParams,\n  updateProfileOnRTDB,\n  updateProfileOnFirestore,\n  setupPresence\n} from '../utils/auth'\nimport { promisesForPopulate, getPopulateObjs } from '../utils/populate'\n\n/**\n * Dispatch login error action\n * @param {Function} dispatch - Action dispatch function\n * @param {object} authError - Error object\n * @param {object} params - Supplement action params\n * @returns {any} Return of action dispatch\n * @private\n */\nfunction dispatchLoginError(dispatch, authError, params = {}) {\n  return dispatch({\n    type: actionTypes.LOGIN_ERROR,\n    ...params,\n    authError\n  })\n}\n\n/**\n * Remove listener from user profile\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport function unWatchUserProfile(firebase) {\n  const {\n    authUid,\n    config: { userProfile, useFirestoreForProfile }\n  } = firebase._\n  if (!firebase._.profileWatch) {\n    return\n  }\n  if (useFirestoreForProfile && firebase.firestore) {\n    // Call profile onSnapshot unsubscribe stored on profileWatch\n    firebase._.profileWatch()\n  } else if (userProfile && firebase.database) {\n    firebase\n      .database()\n      .ref()\n      .child(`${userProfile}/${authUid}`)\n      .off('value', firebase._.profileWatch)\n  }\n  firebase._.profileWatch = null\n}\n\n/**\n * @param {firebase.database.Snapshot|firebase.firestore.DocumentSnapshot} snap - Profile snapshot\n * @returns {object|null} Profile from snapshot\n */\nfunction getProfileFromSnap(snap) {\n  // Real Time Database\n  if (snap && snap.val) {\n    return snap.val()\n  }\n  // Firestore\n  if (snap && snap.data && snap.exists) {\n    return snap.data()\n  }\n  return null\n}\n\n/**\n * Handle response from profile listener. Works with both Real Time Database\n * and Cloud Firestore.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {firebase.database.Snapshot|firebase.firestore.DocumentSnapshot} userProfileSnap - Snapshot from profile watcher\n * @param {string} token - Token to pass along in action dispatch\n * @private\n */\nexport function handleProfileWatchResponse(\n  dispatch,\n  firebase,\n  userProfileSnap,\n  token\n) {\n  const {\n    profileParamsToPopulate,\n    autoPopulateProfile,\n    useFirestoreForProfile,\n    logErrors\n  } = firebase._.config\n  const profile = getProfileFromSnap(userProfileSnap)\n  if (\n    !profileParamsToPopulate ||\n    useFirestoreForProfile || // populating profile through firestore not yet supported\n    (!Array.isArray(profileParamsToPopulate) &&\n      !isString(profileParamsToPopulate))\n  ) {\n    if (useFirestoreForProfile && profileParamsToPopulate) {\n      console.warn('Profile population is not yet supported for Firestore') // eslint-disable-line no-console\n    }\n    dispatch({\n      type: actionTypes.SET_PROFILE,\n      profile: token ? { ...profile, token } : profile\n    })\n  } else {\n    // Convert array of populate config into an array of once query promises\n    promisesForPopulate(\n      firebase,\n      userProfileSnap.key,\n      profile,\n      profileParamsToPopulate\n    )\n      .then((data) => {\n        // Fire actions for placement of data gathered in populate into redux\n        forEach(data, (result, path) => {\n          dispatch({\n            type: actionTypes.SET,\n            path,\n            data: result,\n            timestamp: Date.now(),\n            requesting: false,\n            requested: true\n          })\n        })\n        if (!autoPopulateProfile) {\n          // Dispatch action with profile combined with populated parameters\n          dispatch({\n            type: actionTypes.SET_PROFILE,\n            profile: token ? { ...profile, token } : profile\n          })\n        } else {\n          // Auto Populate profile\n          const populates = getPopulateObjs(profileParamsToPopulate)\n          const profile = userProfileSnap.val()\n          dispatch({\n            type: actionTypes.SET_PROFILE,\n            profile: populate(\n              { profile: token ? { ...profile, token } : profile, data },\n              'profile',\n              populates\n            )\n          })\n        }\n      })\n      .catch((err) => {\n        if (logErrors) {\n          // eslint-disable-next-line no-console\n          console.error(\n            `RRF: Error retrieving data for profile population. Firebase:`,\n            err\n          )\n        }\n        // Error retrieving data for population onto profile.\n        dispatch({\n          type: actionTypes.UNAUTHORIZED_ERROR,\n          authError: `Error during profile population: ${err.message}`\n        })\n        // Update profile with un-populated version\n        dispatch({ type: actionTypes.SET_PROFILE, profile })\n      })\n  }\n}\n\n/**\n * Creates a function for handling errors from profile watcher. Used for\n * both RTDB and Firestore.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @returns {Function} Profile watch error handler function\n * @private\n */\nfunction createProfileWatchErrorHandler(dispatch, firebase) {\n  const {\n    config: { onProfileListenerError, logErrors }\n  } = firebase._\n  return function handleProfileError(err) {\n    if (logErrors) {\n      // eslint-disable-next-line no-console\n      console.error(`Error with profile listener: ${err.message || ''}`, err)\n    }\n    if (typeof onProfileListenerError === 'function') {\n      const factoryResult = onProfileListenerError(err, firebase)\n      // Return factoryResult if it is a promise\n      if (typeof factoryResult.then === 'function') {\n        return factoryResult\n      }\n    }\n    return Promise.reject(err)\n  }\n}\n\n/**\n * Watch user profile. Internally dispatches sets firebase._.profileWatch\n * and calls SET_PROFILE actions. Supports both Realtime Database and Firestore\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport const watchUserProfile = (dispatch, firebase) => {\n  const {\n    authUid,\n    config: { userProfile, useFirestoreForProfile, enableClaims }\n  } = firebase._\n  unWatchUserProfile(firebase)\n\n  if (userProfile) {\n    if (useFirestoreForProfile && firebase.firestore) {\n      firebase._.profileWatch = firebase // eslint-disable-line no-param-reassign\n        .firestore()\n        .collection(userProfile)\n        .doc(authUid)\n        .onSnapshot((userProfileSnap) => {\n          return enableClaims\n            ? firebase\n                .auth()\n                .currentUser.getIdTokenResult(true)\n                .then((token) =>\n                  handleProfileWatchResponse(\n                    dispatch,\n                    firebase,\n                    userProfileSnap,\n                    token\n                  )\n                )\n            : handleProfileWatchResponse(\n                dispatch,\n                firebase,\n                userProfileSnap,\n                null\n              )\n        }, createProfileWatchErrorHandler(dispatch, firebase))\n    } else if (firebase.database) {\n      firebase._.profileWatch = firebase // eslint-disable-line no-param-reassign\n        .database()\n        .ref()\n        .child(`${userProfile}/${authUid}`)\n        .on(\n          'value',\n          (userProfileSnap) => {\n            enableClaims\n              ? firebase\n                  .auth()\n                  .currentUser.getIdTokenResult(true)\n                  .then((token) =>\n                    handleProfileWatchResponse(\n                      dispatch,\n                      firebase,\n                      userProfileSnap,\n                      token\n                    )\n                  )\n              : handleProfileWatchResponse(\n                  dispatch,\n                  firebase,\n                  userProfileSnap,\n                  null\n                )\n          },\n          createProfileWatchErrorHandler(dispatch, firebase)\n        )\n    } else {\n      throw new Error(\n        'Real Time Database or Firestore must be included to enable user profile'\n      )\n    }\n  } else if (enableClaims) {\n    firebase._.profileWatch = firebase\n      .auth()\n      .currentUser.getIdTokenResult(true)\n      .then((token) => {\n        dispatch({\n          type: actionTypes.SET_PROFILE,\n          profile: { token }\n        })\n      })\n  }\n}\n\n/**\n * Create user profile if it does not already exist.\n * `updateProfileOnLogin: false` can be passed to config to disable updating.\n * Profile factory is applied if it exists and is a function.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} userData - User data object (response from authenticating)\n * @param {object} profile - Profile data to place in new profile\n * @returns {Promise} Resolves after creating user profile\n * @private\n */\nexport const createUserProfile = (dispatch, firebase, userData, profile) => {\n  const {\n    _: { config }\n  } = firebase\n  if (!config.userProfile || (!firebase.database && !firebase.firestore)) {\n    return Promise.resolve(userData)\n  }\n  // use profileFactory if it exists in config\n  if (typeof config.profileFactory === 'function') {\n    // catch errors in user provided profileFactory function\n    try {\n      profile = config.profileFactory(userData, profile, firebase) // eslint-disable-line no-param-reassign\n    } catch (err) {\n      /* eslint-disable no-console */\n      console.error(\n        'Error occurred within profileFactory function:',\n        err.message || err\n      )\n      /* eslint-enable no-console */\n      return Promise.reject(err)\n    }\n  }\n\n  // Check/Write profile using Firestore\n  if (config.useFirestoreForProfile) {\n    // Check for user's profile at userProfile path if provided\n    return firebase\n      .firestore()\n      .collection(config.userProfile)\n      .doc(userData.uid || userData.user.uid)\n      .get()\n      .then((profileSnap) => {\n        // Return if config for updating profile is not enabled and profile exists\n        if (!config.updateProfileOnLogin && profileSnap.exists) {\n          return profileSnap.data()\n        }\n        let newProfile = profile\n\n        // If the user did supply a profileFactory, we should use the result of it for the new Profile\n        if (!newProfile) {\n          // Convert to JSON format (to prevent issue of writing invalid type to Firestore)\n          const userDataObject = userData.uid\n            ? userData.toJSON\n              ? userData.toJSON()\n              : userData\n            : userData.user.toJSON\n            ? userData.user.toJSON()\n            : userData.user\n          // Remove unnecessary auth params (configurable) and preserve types of timestamps\n          newProfile = {\n            ...omit(userDataObject, config.keysToRemoveFromAuth),\n            avatarUrl: userDataObject.photoURL // match profile pattern used for RTDB\n          }\n        }\n\n        // Convert custom object type within Provider data to a normal object\n        if (Array.isArray(newProfile.providerData)) {\n          newProfile.providerData = newProfile.providerData.map(\n            (providerDataItem) =>\n              pick(providerDataItem, config.keysToPreserveFromProviderData)\n          )\n        }\n\n        // Create/Update the profile\n        return profileSnap.ref\n          .set(newProfile, { merge: true })\n          .then(() => newProfile)\n      })\n      .catch((err) => {\n        // Error reading user profile\n        dispatch({ type: actionTypes.UNAUTHORIZED_ERROR, authError: err })\n        return Promise.reject(err)\n      })\n  }\n\n  // Check/Write profile using Firebase RTDB\n  return firebase\n    .database()\n    .ref()\n    .child(\n      `${config.userProfile}/${\n        userData.user ? userData.user.uid : userData.uid\n      }`\n    )\n    .once('value')\n    .then(\n      (profileSnap) =>\n        // update profile only if doesn't exist or if set by config\n        !config.updateProfileOnLogin && profileSnap.val() !== null\n          ? profileSnap.val()\n          : profileSnap.ref.update(profile).then(() => profile) // Update the profile\n    )\n    .catch((err) => {\n      // Error reading user profile\n      dispatch({ type: actionTypes.UNAUTHORIZED_ERROR, authError: err })\n      if (typeof config.onProfileWriteError === 'function') {\n        config.onProfileWriteError(err, firebase)\n      }\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Auth state change handler. Handles response from firebase's onAuthStateChanged\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param  {object} authData - Auth data from firebase's onAuthStateChanged\n * @private\n */\nconst handleAuthStateChange = (dispatch, firebase, authData) => {\n  const { config } = firebase._\n  if (!authData) {\n    // Run onAuthStateChanged if it exists in config and enableEmptyAuthChanges is set to true\n    if (typeof config.onAuthStateChanged === 'function') {\n      firebase._.config.onAuthStateChanged(authData, firebase, dispatch)\n    }\n    dispatch({\n      type: actionTypes.AUTH_EMPTY_CHANGE,\n      preserve: config.preserveOnEmptyAuthChange\n    })\n\n    unWatchUserProfile(firebase)\n  } else {\n    firebase._.authUid = authData.uid // eslint-disable-line no-param-reassign\n\n    // setup presence if settings and database exist\n    if (config.presence) {\n      setupPresence(dispatch, firebase)\n    }\n\n    dispatch({\n      type: actionTypes.LOGIN,\n      auth: authData,\n      preserve: config.preserveOnLogin\n    })\n\n    watchUserProfile(dispatch, firebase)\n\n    // Run onAuthStateChanged if it exists in config\n    if (typeof config.onAuthStateChanged === 'function') {\n      config.onAuthStateChanged(authData, firebase, dispatch)\n    }\n  }\n}\n\n/**\n * Redirect result handler\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param  {object} authData - Auth data from Firebase's getRedirectResult\n * @returns {void}\n * @private\n */\nexport const handleRedirectResult = (dispatch, firebase, authData) => {\n  // Run onRedirectResult if it exists in config\n  if (typeof firebase._.config.onRedirectResult === 'function') {\n    firebase._.config.onRedirectResult(authData, firebase, dispatch)\n  }\n  if (authData && authData.user) {\n    const { user } = authData\n\n    firebase._.authUid = user.uid // eslint-disable-line no-param-reassign\n    watchUserProfile(dispatch, firebase)\n\n    dispatch({\n      type: actionTypes.LOGIN,\n      auth: user,\n      preserve: firebase._.config.preserveOnLogin\n    })\n\n    return createUserProfile(dispatch, firebase, user, {\n      email: user.email,\n      displayName: user.providerData[0].displayName || user.email,\n      avatarUrl: user.providerData[0].photoURL,\n      providerData: user.providerData\n    })\n  }\n}\n\n/**\n * Initialize authentication state change listener that\n * watches user profile and dispatches login action\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport const init = (dispatch, firebase) => {\n  // exit if auth does not exist\n  if (!firebase.auth) {\n    return\n  }\n  dispatch({ type: actionTypes.AUTHENTICATION_INIT_STARTED })\n  // Set Auth State listener\n  firebase\n    .auth()\n    .onAuthStateChanged((authData) =>\n      handleAuthStateChange(dispatch, firebase, authData)\n    )\n\n  // set redirect result callback if enableRedirectHandling set to true\n  if (\n    firebase._.config.enableRedirectHandling &&\n    typeof firebase.auth().getRedirectResult === 'function' &&\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('http') !== -1\n  ) {\n    firebase\n      .auth()\n      .getRedirectResult()\n      .then((authData) => handleRedirectResult(dispatch, firebase, authData))\n      .catch((error) => {\n        dispatchLoginError(dispatch, error)\n        return Promise.reject(error)\n      })\n  }\n\n  firebase.auth().currentUser // eslint-disable-line no-unused-expressions\n\n  dispatch({ type: actionTypes.AUTHENTICATION_INIT_FINISHED })\n}\n\n/**\n * Login with errors dispatched\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {object} credentials.email - Email to login with (only needed for email login)\n * @param {object} credentials.password - Password to login with (only needed for email login)\n * @param {object} credentials.provider - Provider name such as google, twitter (only needed for 3rd party provider login)\n * @param {object} credentials.type - Popup or redirect (only needed for 3rd party provider login)\n * @param {object} credentials.token - Custom or provider token\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider (i.e. email)\n * @returns {Promise} Resolves after user is logged in\n * @private\n */\nexport const login = (dispatch, firebase, credentials) => {\n  if (firebase._.config.resetBeforeLogin) {\n    dispatchLoginError(dispatch, null)\n  }\n\n  const { method, params } = getLoginMethodAndParams(firebase, credentials)\n\n  return firebase\n    .auth()\n    [method](...params)\n    .then((userData) => {\n      // Handle null response from getRedirectResult before redirect has happened\n      if (!userData) return Promise.resolve(null)\n\n      // For email auth return uid (createUser is used for creating a profile)\n      if (\n        [\n          'signInWithEmailAndPassword',\n          'signInAndRetrieveDataWithEmailAndPassword',\n          'signInWithEmailLink'\n        ].includes(method)\n      ) {\n        return { user: userData }\n      }\n      // TODO: Only call createUserProfile once, and just pass different settings\n\n      // For token auth, the user key doesn't exist. Instead, return the JWT.\n      if (\n        [\n          'signInWithCustomToken',\n          'signInAndRetrieveDataWithCustomToken'\n        ].includes(method)\n      ) {\n        if (!firebase._.config.updateProfileOnLogin) {\n          return { user: userData }\n        }\n        return createUserProfile(\n          dispatch,\n          firebase,\n          userData,\n          credentials.profile\n        )\n      }\n\n      if (method === 'signInWithPhoneNumber') {\n        // Modify confirm method to include profile creation\n        return {\n          ...userData,\n          confirm: (code) =>\n            // Call original confirm\n            userData.confirm(code).then(({ user, additionalUserInfo }) =>\n              createUserProfile(dispatch, firebase, user, {\n                phoneNumber: user.providerData[0].phoneNumber,\n                providerData: user.providerData\n              }).then((profile) => ({ profile, user, additionalUserInfo }))\n            )\n        }\n      }\n\n      // Create profile when logging in with external provider\n      const user = userData.user || userData\n\n      return createUserProfile(\n        dispatch,\n        firebase,\n        user,\n        credentials.profile || {\n          email: user.email,\n          displayName: user.providerData[0].displayName || user.email,\n          avatarUrl: user.providerData[0].photoURL,\n          providerData: user.providerData\n        }\n      ).then((profile) => ({ profile, ...userData }))\n    })\n    .catch((err) => {\n      dispatchLoginError(dispatch, err)\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Reauthenticate with errors dispatched\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {object} credentials.provider - Provider name such as google, twitter (only needed for 3rd party provider login)\n * @param {object} credentials.type - Popup or redirect (only needed for 3rd party provider login)\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider (i.e. email)\n * @returns {Promise} Resolves after user is logged in\n * @private\n */\nexport const reauthenticate = (dispatch, firebase, credentials) => {\n  const { method, params } = getReauthenticateMethodAndParams(\n    firebase,\n    credentials\n  )\n\n  return firebase\n    .auth()\n    .currentUser[method](...params)\n    .then((userData) => {\n      // Handle null response from getRedirectResult before redirect has happened\n      if (!userData) return Promise.resolve(null)\n\n      if (method === 'reauthenticateWithPhoneNumber') {\n        // Modify confirm method to include profile creation\n        return {\n          ...userData,\n          confirm: (code) =>\n            // Call original confirm\n            userData.confirm(code).then(({ user, additionalUserInfo }) =>\n              createUserProfile(dispatch, firebase, user, {\n                phoneNumber: user.providerData[0].phoneNumber,\n                providerData: user.providerData\n              }).then((profile) => ({ profile, user, additionalUserInfo }))\n            )\n        }\n      }\n\n      // Create profile when logging in with external provider\n      const user = userData.user || userData\n\n      return createUserProfile(\n        dispatch,\n        firebase,\n        user,\n        credentials.profile || {\n          email: user.email,\n          displayName: user.providerData[0].displayName || user.email,\n          avatarUrl: user.providerData[0].photoURL,\n          providerData: user.providerData\n        }\n      ).then((profile) => ({ profile, ...userData }))\n    })\n    .catch((err) => {\n      dispatchLoginError(dispatch, err, { reauthenticate: true })\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Logout of firebase and dispatch logout event\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @returns {Promise} Resolves after logging out\n * @private\n */\nexport const logout = (dispatch, firebase) => {\n  // detach profile listener before logging out to prevent permission_denied\n  // errors (for more info see #494)\n  unWatchUserProfile(firebase)\n  return firebase\n    .auth()\n    .signOut()\n    .then(() => {\n      const action = {\n        type: actionTypes.LOGOUT\n      }\n      if (firebase._.config.preserveOnLogout) {\n        action.preserve = firebase._.config.preserveOnLogout\n      }\n      dispatch(action)\n      firebase._.authUid = null\n      return firebase\n    })\n}\n\n/**\n * Create a new user in auth and add an account to userProfile root\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.email - Email of user\n * @param {string} credentials.password - Password of new user\n * @param {object} profile - Profile to store in database for new user\n * @returns {Promise} Resolves after user is created\n * @private\n */\nexport const createUser = (\n  dispatch,\n  firebase,\n  { email, password },\n  profile\n) => {\n  dispatchLoginError(dispatch, null)\n\n  if (!email || !password) {\n    const error = new Error('Email and Password are required to create user')\n    dispatchLoginError(dispatch, error)\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then((userData) =>\n      // Login to newly created account flag is not set to false\n      createUserProfile(dispatch, firebase, userData, profile || { email })\n    )\n    .catch((err) => {\n      dispatchLoginError(dispatch, err)\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Send password reset email to provided email\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} email - Email to send recovery email to\n * @returns {Promise} Resolves after password reset email is sent\n * @private\n */\nexport const resetPassword = (dispatch, firebase, email) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .sendPasswordResetEmail(email)\n    .catch((err) => {\n      if (err) {\n        switch (err.code) {\n          case 'auth/user-not-found':\n            dispatchLoginError(dispatch, {\n              ...err,\n              message: 'The specified user account does not exist.'\n            })\n            break\n          default:\n            dispatchLoginError(dispatch, err)\n        }\n        return Promise.reject(err)\n      }\n    })\n}\n\n/**\n * Confirm the password reset with code and password\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} code - Email confirmation reset code\n * @param {string} password - Password to set it to\n * @returns {Promise} Resvoles after password reset is confirmed\n * @private\n */\nexport const confirmPasswordReset = (dispatch, firebase, code, password) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .confirmPasswordReset(code, password)\n    .catch((err) => {\n      if (err) {\n        switch (err.code) {\n          case 'auth/expired-action-code':\n            dispatchLoginError(\n              dispatch,\n              new Error('The action code has expired.')\n            )\n            break\n          case 'auth/invalid-action-code':\n            dispatchLoginError(\n              dispatch,\n              new Error('The action code is invalid.')\n            )\n            break\n          case 'auth/user-disabled':\n            dispatchLoginError(dispatch, new Error('The user is disabled.'))\n            break\n          case 'auth/user-not-found':\n            dispatchLoginError(dispatch, new Error('The user is not found.'))\n            break\n          case 'auth/weak-password':\n            dispatchLoginError(\n              dispatch,\n              new Error('The password is not strong enough.')\n            )\n            break\n          default:\n            dispatchLoginError(dispatch, err)\n        }\n        return Promise.reject(err)\n      }\n    })\n}\n\n/**\n * Verify that password reset code is valid\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} code - Password reset code\n * @returns {Promise} email - Email associated with reset code\n * @private\n */\nexport const verifyPasswordResetCode = (dispatch, firebase, code) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .verifyPasswordResetCode(code)\n    .catch((err) => {\n      if (err) {\n        dispatchLoginError(dispatch, err)\n      }\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Apply a verification code sent via email or other mechanism\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} code - Verification code\n * @returns {Promise} Resolves after applying verification code\n * @private\n */\nexport const applyActionCode = (dispatch, firebase, code) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .applyActionCode(code)\n    .catch((err) => {\n      if (err) {\n        dispatchLoginError(dispatch, err)\n      }\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Update user profile\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} profileUpdate - Update for profile\n * @param {object} options - Options object\n * @returns {Promise} Resolves after updating profile\n * @private\n */\nexport const updateProfile = (dispatch, firebase, profileUpdate, options) => {\n  const {\n    _: { config }\n  } = firebase\n  dispatch({\n    type: actionTypes.PROFILE_UPDATE_START,\n    payload: profileUpdate\n  })\n  // Select update promise type (firebase/firestore) based on config\n  const updatePromise = config.useFirestoreForProfile\n    ? updateProfileOnFirestore\n    : updateProfileOnRTDB\n  return updatePromise(firebase, profileUpdate, options)\n    .then((snap) => {\n      dispatch({\n        type: actionTypes.PROFILE_UPDATE_SUCCESS,\n        payload: config.useFirestoreForProfile ? snap.data() : snap.val()\n      })\n      return snap\n    })\n    .catch((error) => {\n      dispatch({ type: actionTypes.PROFILE_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Update Auth Profile Object. Internally calls\n * `firebase.auth().currentUser.updateProfile` as seen [in the firebase docs](https://firebase.google.com/docs/auth/web/manage-users#update_a_users_profile).\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} authUpdate - Update for current user's auth profile\n * @param {boolean} updateInProfile - Whether or not to update in profile as well\n * @returns {Promise} Resolves with results of updating auth\n * @private\n */\nexport const updateAuth = (dispatch, firebase, authUpdate, updateInProfile) => {\n  dispatch({ type: actionTypes.AUTH_UPDATE_START, payload: authUpdate })\n\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to update auth.')\n    dispatch({ type: actionTypes.AUTH_UPDATE_ERROR, payload: error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.updateProfile(authUpdate)\n    .then((payload) => {\n      dispatch({\n        type: actionTypes.AUTH_UPDATE_SUCCESS,\n        auth: firebase.auth().currentUser\n      })\n      if (updateInProfile) {\n        return updateProfile(dispatch, firebase, authUpdate)\n      }\n      return payload\n    })\n    .catch((error) => {\n      dispatch({ type: actionTypes.AUTH_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Update user's email within Firebase auth and optionally within\n * users's profile. Internally calls `firebase.auth().currentUser.updateEmail`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {string} newEmail - Update to be auth object\n * @param {boolean} updateInProfile - Whether or not to update email within\n * user's profile object (stored under path provided to userProfile config)\n * @returns {Promise} Resolves with results of updating email\n * @private\n */\nexport const updateEmail = (dispatch, firebase, newEmail, updateInProfile) => {\n  dispatch({ type: actionTypes.EMAIL_UPDATE_START, payload: newEmail })\n\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to update email.')\n    dispatch({ type: actionTypes.EMAIL_UPDATE_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.updateEmail(newEmail)\n    .then((payload) => {\n      dispatch({ type: actionTypes.EMAIL_UPDATE_SUCCESS, payload: newEmail })\n      if (updateInProfile) {\n        return updateProfile(dispatch, firebase, { email: newEmail })\n      }\n      return payload\n    })\n    .catch((error) => {\n      dispatch({ type: actionTypes.EMAIL_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Reload Auth state. Internally calls\n * `firebase.auth().currentUser.reload`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @returns {Promise} Resolves with auth\n */\nexport const reloadAuth = (dispatch, firebase) => {\n  dispatch({ type: actionTypes.AUTH_RELOAD_START })\n\n  // reject and dispatch error if not logged in\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to reload auth.')\n    dispatch({ type: actionTypes.AUTH_RELOAD_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.reload()\n    .then(() => {\n      const auth = firebase.auth().currentUser\n      dispatch({ type: actionTypes.AUTH_RELOAD_SUCCESS, payload: auth })\n      return auth\n    })\n    .catch((error) => {\n      dispatch({ type: actionTypes.AUTH_RELOAD_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkWithCredential`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credential - Credential with which to link user account\n * @returns {Promise} Resolves with auth\n */\nexport const linkWithCredential = (dispatch, firebase, credential) => {\n  dispatch({ type: actionTypes.AUTH_LINK_START })\n\n  // reject and dispatch error if not logged in\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to link with credential.')\n    dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.linkWithCredential(credential)\n    .then((auth) => {\n      dispatch({ type: actionTypes.AUTH_LINK_SUCCESS, payload: auth })\n      return auth\n    })\n    .catch((error) => {\n      dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * @param {Function} promiseFunc - Promise function\n * @param {Array} args - arguments to pass to function\n * @param {Function} dispatch - Redux dispatch function\n * @param {object} firebase - Internal firebase object\n * @returns {Promise} Resolves after auth is linked and AUTH_LINK_SUCCESS\n * action is dispatched\n */\nfunction linkWithAuthDispatch(promiseFunc, args, dispatch, firebase) {\n  dispatch({ type: actionTypes.AUTH_LINK_START })\n\n  // reject and dispatch error if not logged in\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to link with credential.')\n    dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return promiseFunc(...args)\n    .then((auth) => {\n      dispatch({ type: actionTypes.AUTH_LINK_SUCCESS, payload: auth })\n      return auth\n    })\n    .catch((error) => {\n      dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkAndRetrieveDataWithCredential`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credential - Credential with which to link user account\n * @returns {Promise} Resolves with auth\n */\nexport function linkAndRetrieveDataWithCredential(\n  dispatch,\n  firebase,\n  credential\n) {\n  return linkWithAuthDispatch(\n    firebase.auth().currentUser.linkAndRetrieveDataWithCredential,\n    [credential],\n    dispatch,\n    firebase\n  )\n}\n\n/**\n * Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkWithPopup`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {object} credential - Credential with which to link user account\n * @returns {Promise} Resolves with auth\n */\nexport function linkWithPopup(dispatch, firebase, credential) {\n  return linkWithAuthDispatch(\n    firebase.auth().currentUser.linkWithPopup,\n    [credential],\n    dispatch,\n    firebase\n  )\n}\n\n/**\n * Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkWithRedirect`.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @param {any} provider - Auth provider\n * @returns {Promise} Resolves with auth\n */\nexport function linkWithRedirect(dispatch, firebase, provider) {\n  return linkWithAuthDispatch(\n    firebase.auth().currentUser.linkWithRedirect,\n    [provider],\n    dispatch,\n    firebase\n  )\n}\n\n/**\n * Asynchronously signs in using a phone number and create's\n * user profile. This method sends a code via SMS to the given phone\n * number, and returns a firebase.auth.ConfirmationResult. Internally\n * calls `firebase.auth().signInWithPhoneNumber`.\n * @param {object} firebase - Internal firebase object\n * @param {Function} dispatch - Action dispatch function\n * @param {string} phoneNumber - Phone number\n * @param {object} applicationVerifier - Phone number\n * @param {object} options - Options object\n * @returns {Promise} Resolves with auth\n */\nexport function signInWithPhoneNumber(\n  firebase,\n  dispatch,\n  phoneNumber,\n  applicationVerifier,\n  options = {}\n) {\n  return login(dispatch, firebase, {\n    phoneNumber,\n    applicationVerifier,\n    ...options\n  })\n}\n"],"mappings":"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","ignoreList":[]}