{"version":3,"file":"reducers.js","names":["pathToArr","path","split","filter","p","getSlashStrPath","join","getDotStrPath","combineReducers","reducers","state","arguments","length","action","Object","keys","reduce","nextState","key","preserveValuesFromState","preserveSetting","_objectSpread","Array","isArray","_pick2","default","Error","recursiveUnset","obj","isRecursiveCall","_size2","_get2","objectWithRemovedKey","_unset2","newPath","match","replace"],"sources":["../../src/utils/reducers.js"],"sourcesContent":["import { get, size, pick } from 'lodash'\nimport { unset } from 'lodash/fp'\n\n/**\n * Create a path array from path string\n * @param {string} path - Path seperated with slashes\n * @returns {Array} Path as Array\n * @private\n */\nexport function pathToArr(path) {\n  return path ? path.split(/\\//).filter((p) => !!p) : []\n}\n\n/**\n * Trim leading slash from path for use with state\n * @param {string} path - Path seperated with slashes\n * @returns {string} Path seperated with slashes\n * @private\n */\nexport function getSlashStrPath(path) {\n  return pathToArr(path).join('/')\n}\n\n/**\n * Convert path with slashes to dot seperated path (for use with lodash get/set)\n * @param {string} path - Path seperated with slashes\n * @returns {string} Path seperated with dots\n * @private\n */\nexport function getDotStrPath(path) {\n  return pathToArr(path).join('.')\n}\n\n/**\n * Combine reducers utility (abreveated version of redux's combineReducer).\n * Turns an object whose values are different reducer functions, into a single\n * reducer function.\n * @param {object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one.\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n * @private\n */\nexport function combineReducers(reducers) {\n  return (state = {}, action) => {\n    return Object.keys(reducers).reduce((nextState, key) => {\n      nextState[key] = reducers[key](\n        // eslint-disable-line no-param-reassign\n        state[key],\n        action\n      )\n      return nextState\n    }, {})\n  }\n}\n\n/**\n * Preserve values from redux state change\n * @param {object} state - Redux state\n * @param {Function|boolean|Array} preserveSetting - Setting for which values to preserve\n * from redux state\n * @param {object} nextState - Next redux state\n * @returns {object} State with values preserved\n */\nexport function preserveValuesFromState(state, preserveSetting, nextState) {\n  // Return result of function if preserve is a function\n  if (typeof preserveSetting === 'function') {\n    return preserveSetting(state, nextState)\n  }\n\n  // Return original state if preserve is true\n  if (preserveSetting === true) {\n    return nextState ? { ...state, ...nextState } : state\n  }\n\n  if (Array.isArray(preserveSetting)) {\n    return pick(state, preserveSetting) // pick returns a new object\n  }\n\n  throw new Error(\n    'Invalid preserve parameter. It must be an Object or an Array'\n  )\n}\n\n/**\n * Recursively unset a property starting at the deep path, and unsetting the parent\n * property if there are no other enumerable properties at that level.\n * @param {string} path - Deep dot path of the property to unset\n * @param {object} obj - Object from which path should be recursivley unset\n * @param {boolean} [isRecursiveCall=false] - Used internally to ensure that\n * the object size check is only performed after one iteration.\n * @returns {object} The object with the property deeply unset\n * @private\n */\nexport function recursiveUnset(path, obj, isRecursiveCall = false) {\n  if (!path) {\n    return obj\n  }\n\n  if (size(get(obj, path)) > 0 && isRecursiveCall) {\n    return obj\n  }\n  // The object does not have any other properties at this level.  Remove the\n  // property.\n  const objectWithRemovedKey = unset(path, obj)\n  const newPath = path.match(/\\./) ? path.replace(/\\.[^.]*$/, '') : ''\n  return recursiveUnset(newPath, objectWithRemovedKey, true)\n}\n"],"mappings":"o9DASO,QAAS,CAAAA,SAASA,CAACC,IAAI,CAAE,CAC9B,MAAO,CAAAA,IAAI,CAAGA,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAAC,SAACC,CAAC,QAAK,CAAC,CAACA,CAAC,EAAC,CAAG,EACtD,CAQO,QAAS,CAAAC,eAAeA,CAACJ,IAAI,CAAE,CACpC,MAAO,CAAAD,SAAS,CAACC,IAAI,CAAC,CAACK,IAAI,CAAC,GAAG,CACjC,CAQO,QAAS,CAAAC,aAAaA,CAACN,IAAI,CAAE,CAClC,MAAO,CAAAD,SAAS,CAACC,IAAI,CAAC,CAACK,IAAI,CAAC,GAAG,CACjC,CAYO,QAAS,CAAAE,eAAeA,CAACC,QAAQ,CAAE,CACxC,MAAO,WAAwB,IAAvB,CAAAC,KAAK,GAAAC,SAAA,CAAAC,MAAA,EAAAD,SAAA,aAAAA,SAAA,IAAG,CAAC,CAAC,CAAEE,MAAM,GAAAF,SAAA,CAAAC,MAAA,CAAAD,SAAA,WACxB,MAAO,CAAAG,MAAM,CAACC,IAAI,CAACN,QAAQ,CAAC,CAACO,MAAM,CAAC,SAACC,SAAS,CAAEC,GAAG,CAAK,CAMtD,MALA,CAAAD,SAAS,CAACC,GAAG,CAAC,CAAGT,QAAQ,CAACS,GAAG,CAAC,CAE5BR,KAAK,CAACQ,GAAG,CAAC,CACVL,MACF,CAAC,CACMI,SACT,CAAC,CAAE,CAAC,CAAC,CACP,CACF,CAUO,QAAS,CAAAE,uBAAuBA,CAACT,KAAK,CAAEU,eAAe,CAAEH,SAAS,CAAE,CAEzE,GAA+B,UAAU,EAArC,MAAO,CAAAG,eAA8B,CACvC,MAAO,CAAAA,eAAe,CAACV,KAAK,CAAEO,SAAS,CAAC,CAI1C,GAAI,KAAAG,eAAwB,CAC1B,MAAO,CAAAH,SAAS,CAAAI,aAAA,CAAAA,aAAA,IAAQX,KAAK,EAAKO,SAAS,EAAKP,KAAK,CAGvD,GAAIY,KAAK,CAACC,OAAO,CAACH,eAAe,CAAC,CAChC,MAAO,GAAAI,MAAA,CAAAC,OAAA,EAAKf,KAAK,CAAEU,eAAe,CAAC,CAGrC,KAAM,IAAI,CAAAM,KAAK,CACb,8DACF,CACF,CAYO,QAAS,CAAAC,cAAcA,CAAC1B,IAAI,CAAE2B,GAAG,CAA2B,IAAzB,CAAAC,eAAe,MAAAlB,SAAA,CAAAC,MAAA,EAAAD,SAAA,eAAAA,SAAA,IACvD,GAAI,CAACV,IAAI,CACP,MAAO,CAAA2B,GAAG,CAGZ,GAA2B,CAAC,CAAxB,GAAAE,MAAA,CAAAL,OAAA,EAAK,GAAAM,KAAA,CAAAN,OAAA,EAAIG,GAAG,CAAE3B,IAAI,CAAC,CAAK,EAAI4B,eAAe,CAC7C,MAAO,CAAAD,GAAG,CACX,GAGK,CAAAI,oBAAoB,CAAG,GAAAC,OAAA,CAAAR,OAAA,EAAMxB,IAAI,CAAE2B,GAAG,CAAC,CACvCM,OAAO,CAAGjC,IAAI,CAACkC,KAAK,CAAC,IAAI,CAAC,CAAGlC,IAAI,CAACmC,OAAO,CAAC,UAAU,CAAE,EAAE,CAAC,CAAG,EAAE,CACpE,MAAO,CAAAT,cAAc,CAACO,OAAO,CAAEF,oBAAoB,GAAM,CAC3D","ignoreList":[]}