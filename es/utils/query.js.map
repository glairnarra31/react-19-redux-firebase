{"version":3,"file":"query.js","names":["tryParseToNumber","value","result","_isNaN2","default","getWatchPath","event","path","Error","concat","substring","getQueryIdFromPath","isString","origPath","pathSplitted","split","isQuery","length","queryParams","queryId","map","param","splittedParam","filter","q","setWatcher","firebase","dispatch","id","_","watchers","type","actionTypes","SET_LISTENER","payload","getWatcherCount","unsetWatcher","database","ref","child","off","UNSET_LISTENER","applyParamsToQuery","query","doNotParse","forEach","orderByValue","orderByPriority","orderByKey","orderByChild","limitToFirst","parseInt","limitToLast","equalToParam","equalTo","startAtParam","startAt","endAtParam","endAt","orderedFromSnapshot","snap","hasChildren","ordered","push","key","val","populateAndDispatch","config","data","populates","snapshot","storeAs","promisesForPopulate","then","results","_forEach2","MERGE","SET","catch","err","ERROR","Promise","reject"],"sources":["../../src/utils/query.js"],"sourcesContent":["import { actionTypes } from '../constants'\nimport { promisesForPopulate } from './populate'\nimport { isNaN, forEach } from 'lodash'\nimport { isString } from './index'\n\n/**\n * @private\n * @param {string|number} value - Item to attempt to parse to a number\n * @returns {any} Number if parse to number was successful, otherwise,\n * original value\n */\nfunction tryParseToNumber(value) {\n  const result = Number(value)\n  if (isNaN(result)) {\n    return value\n  }\n  return result\n}\n\n/**\n * @private\n * @param {string} event - Type of event to watch for\n * @param {string} path - Path to watch with watcher\n * @returns {string} watchPath\n */\nexport function getWatchPath(event, path) {\n  if (!event || event === '' || !path) {\n    throw new Error('Event and path are required')\n  }\n  return `${event}:${path.substring(0, 1) === '/' ? '' : '/'}${path}`\n}\n\n/**\n * @private\n * @param {string} path - Path from which to get query id\n * @param {string} event - Type of query event\n * @returns {string} Query id\n */\nexport function getQueryIdFromPath(path, event) {\n  if (!isString(path)) {\n    throw new Error('Query path must be a string')\n  }\n  const origPath = path\n  const pathSplitted = path.split('#')\n  path = pathSplitted[0]\n\n  const isQuery = pathSplitted.length > 1\n  const queryParams = isQuery ? pathSplitted[1].split('&') : []\n  const queryId = isQuery\n    ? queryParams\n        .map((param) => {\n          const splittedParam = param.split('=')\n          // Handle query id in path\n          if (splittedParam[0] === 'queryId') {\n            return splittedParam[1]\n          }\n        })\n        .filter((q) => q)\n    : undefined\n  return queryId && queryId.length > 0\n    ? event\n      ? `${event}:/${queryId}`\n      : queryId[0]\n    : isQuery\n    ? origPath\n    : undefined\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {Function} dispatch - Redux dispatch function\n * @param {string} event - Type of event to watch for\n * @param {string} path - Path to watch with watcher\n * @param {string} queryId - Id of query\n * @returns {number} watcherCount - count\n */\nexport function setWatcher(firebase, dispatch, event, path, queryId) {\n  const id =\n    queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path)\n\n  if (firebase._.watchers[id]) {\n    firebase._.watchers[id]++\n  } else {\n    firebase._.watchers[id] = 1\n  }\n\n  dispatch({ type: actionTypes.SET_LISTENER, path, payload: { id } })\n\n  return firebase._.watchers[id]\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {string} event - Type of event to watch for\n * @param {string} path - Path to watch with watcher\n * @param {string} queryId - Id of query\n * @returns {number} watcherCount\n */\nexport function getWatcherCount(firebase, event, path, queryId) {\n  const id =\n    queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path)\n  return firebase._.watchers[id]\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {Function} dispatch - Redux's dispatch function\n * @param {string} event - Type of event to watch for\n * @param {string} path - Path to watch with watcher\n * @param {string} queryId - Id of query\n */\nexport function unsetWatcher(firebase, dispatch, event, path, queryId) {\n  const id =\n    queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path)\n  path = path.split('#')[0]\n  const { watchers } = firebase._\n  if (watchers[id] <= 1) {\n    delete watchers[id]\n    if (event !== 'first_child' && event !== 'once') {\n      firebase.database().ref().child(path).off(event)\n    }\n  } else if (watchers[id]) {\n    watchers[id]--\n  }\n\n  dispatch({ type: actionTypes.UNSET_LISTENER, path, payload: { id } })\n}\n\n/**\n * Modify query to include methods based on query parameters (such\n * as orderByChild).\n * @param {Array} queryParams - Array of query parameters to apply to query\n * @param {object} query - Query object on which to apply query parameters\n * @returns {firebase.database.Query} Query with query params applied\n */\nexport function applyParamsToQuery(queryParams, query) {\n  let doNotParse = false\n  if (queryParams) {\n    queryParams.forEach((param) => {\n      param = param.split('=')\n      switch (param[0]) {\n        case 'orderByValue':\n          query = query.orderByValue()\n          doNotParse = true\n          break\n        case 'orderByPriority':\n          query = query.orderByPriority()\n          doNotParse = true\n          break\n        case 'orderByKey':\n          query = query.orderByKey()\n          doNotParse = true\n          break\n        case 'orderByChild':\n          query = query.orderByChild(param[1])\n          break\n        case 'limitToFirst':\n          // TODO: Handle number not being passed as param\n          query = query.limitToFirst(parseInt(param[1], 10))\n          break\n        case 'limitToLast':\n          // TODO: Handle number not being passed as param\n          query = query.limitToLast(parseInt(param[1], 10))\n          break\n        case 'notParsed':\n          // support disabling internal number parsing (number strings)\n          doNotParse = true\n          break\n        case 'parsed':\n          // support disabling internal number parsing (number strings)\n          doNotParse = false\n          break\n        case 'equalTo':\n          let equalToParam = !doNotParse ? tryParseToNumber(param[1]) : param[1] // eslint-disable-line no-case-declarations\n          equalToParam = equalToParam === 'null' ? null : equalToParam\n          equalToParam = equalToParam === 'false' ? false : equalToParam\n          equalToParam = equalToParam === 'true' ? true : equalToParam\n          query =\n            param.length === 3\n              ? query.equalTo(equalToParam, param[2])\n              : query.equalTo(equalToParam)\n          break\n        case 'startAt':\n          let startAtParam = !doNotParse ? tryParseToNumber(param[1]) : param[1] // eslint-disable-line no-case-declarations\n          startAtParam = startAtParam === 'null' ? null : startAtParam\n          query =\n            param.length === 3\n              ? query.startAt(startAtParam, param[2])\n              : query.startAt(startAtParam)\n          break\n        case 'endAt':\n          let endAtParam = !doNotParse ? tryParseToNumber(param[1]) : param[1] // eslint-disable-line no-case-declarations\n          endAtParam = endAtParam === 'null' ? null : endAtParam\n          query =\n            param.length === 3\n              ? query.endAt(endAtParam, param[2])\n              : query.endAt(endAtParam)\n          break\n      }\n    })\n  }\n\n  return query\n}\n\n/**\n * Get ordered array from snapshot\n * @param {firebase.database.DataSnapshot} snap - Data for which to create\n * an ordered array.\n * @returns {Array|null} Ordered list of children from snapshot or null\n */\nexport function orderedFromSnapshot(snap) {\n  if (snap.hasChildren && !snap.hasChildren()) {\n    return null\n  }\n  const ordered = []\n  if (snap.forEach) {\n    snap.forEach((child) => {\n      ordered.push({ key: child.key, value: child.val() })\n    })\n  }\n  return ordered.length ? ordered : null\n}\n\n/**\n * Get data associated with populate settings, and dispatch\n *\n * @param {object} firebase - Internal firebase object\n * @param {Function} dispatch - Redux's dispatch function\n * @param {object} config - Config object\n * @param {any} config.data - Original query data result\n * @param {Array} config.populates - List of populate settings\n * @param {string} config.path - Base query path\n * @param {string} config.storeAs - Location within redux in which to\n * query results will be stored (path is used as default if not provided).\n * @returns {Promise} Promise that resolves after data for populates has been\n * loaded and associated actions have been dispatched\n * @private\n */\nexport function populateAndDispatch(firebase, dispatch, config) {\n  const { data, populates, snapshot, path, storeAs } = config\n  // TODO: Allow setting of unpopulated data before starting population through config\n  return promisesForPopulate(firebase, snapshot.key, data, populates)\n    .then((results) => {\n      // dispatch child sets first so isLoaded is only set to true for\n      // populatedDataToJS after all data is in redux (Issue #121)\n      // TODO: Allow config to toggle Combining into one SET action\n      // TODO: Set ordered for populate queries\n      forEach(results, (result, path) => {\n        dispatch({\n          type: actionTypes.MERGE,\n          path,\n          data: result\n        })\n      })\n      dispatch({\n        type: actionTypes.SET,\n        path: storeAs || path,\n        data,\n        ordered: orderedFromSnapshot(snapshot)\n      })\n      return results\n    })\n    .catch((err) => {\n      dispatch({\n        type: actionTypes.ERROR,\n        payload: err\n      })\n      return Promise.reject(err)\n    })\n}\n"],"mappings":"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","ignoreList":[]}