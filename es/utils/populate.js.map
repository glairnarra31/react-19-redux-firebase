{"version":3,"file":"populate.js","names":["getPopulateObj","str","isString","strArray","split","child","root","getChildType","Array","isArray","_isObject2","default","getPopulateObjs","arr","map","o","getPopulates","queryParams","populates","_filter2","param","indexOf","p","length","getPopulateChild","firebase","populate","id","childPath","childParam","concat","path","database","ref","once","then","snap","val","populateList","list","results","_set2","Promise","all","_map2","childKey","populateKey","populateByKey","pc","promisesForPopulate","dataKey","originalData","populatesIn","promisesArray","populatesForData","dataHasPopulateChilds","_some2","_has2","_forEach2","_get2","push","v","d","key","populatesForDataItem","idOrList"],"sources":["../../src/utils/populate.js"],"sourcesContent":["import { filter, isObject, map, get, forEach, set, has, some } from 'lodash'\nimport { isString } from './index'\n\n/**\n * @private\n * @param {string|object} str - String or Object to standardize into populate object\n * @returns {object} Populate object\n */\nexport function getPopulateObj(str) {\n  if (!isString(str)) {\n    return str\n  }\n  const strArray = str.split(':')\n  // TODO: Handle childParam\n  return { child: strArray[0], root: strArray[1] }\n}\n\n/**\n * @private\n * @param {string|object} child - Value at child parameter\n * @returns {string} Type of child\n */\nexport function getChildType(child) {\n  if (isString(child)) {\n    return 'string'\n  }\n  if (Array.isArray(child)) {\n    return 'array'\n  }\n  if (isObject(child)) {\n    return 'object'\n  }\n  return 'other'\n}\n\n/**\n * @private\n * @param {string|object} arr - String or Object to standardize into populate object\n * @returns {Array} List of populate objects\n */\nexport function getPopulateObjs(arr) {\n  if (!Array.isArray(arr)) {\n    return arr\n  }\n  return arr.map((o) => (isObject(o) ? o : getPopulateObj(o)))\n}\n\n/**\n * @private\n * @param {Array} queryParams - Query parameters from which to get populates\n * @returns {Array} Array of populate settings\n */\nexport function getPopulates(queryParams) {\n  const populates = filter(\n    queryParams,\n    (param) =>\n      param.indexOf('populate') !== -1 || (isObject(param) && param.populates)\n  ).map((p) => p.split('=')[1])\n  // No populates\n  if (!populates.length) {\n    return null\n  }\n  return populates.map(getPopulateObj)\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {object} populate - Object containing root to be populate\n * @param {object} populate.root - Firebase root path from which to load populate item\n * @param {string} id - String id\n * @returns {Promise} Resolves with populate child\n */\nexport function getPopulateChild(firebase, populate, id) {\n  const childPath = populate.childParam ? `/${populate.childParam}` : ''\n  const path = `${populate.root}/${id}${childPath}`\n  return firebase\n    .database()\n    .ref()\n    .child(path)\n    .once('value')\n    .then((snap) =>\n      // Return id if population value does not exist\n      snap.val()\n    )\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {object} list - Object to have parameter populated\n * @param {object} p - Object containing populate information\n * @param {object} results - Object containing results of population from other populates\n * @returns {Promise} Resovles with populated list\n */\nexport function populateList(firebase, list, p, results) {\n  // Handle root not being defined\n  if (!results[p.root]) {\n    set(results, p.root, {})\n  }\n  return Promise.all(\n    map(list, (id, childKey) => {\n      // handle list of keys\n      const populateKey = id === true || p.populateByKey ? childKey : id\n      return getPopulateChild(firebase, p, populateKey).then((pc) => {\n        if (pc) {\n          // write child to result object under root name if it is found\n          return set(results, `${p.root}.${populateKey}`, pc)\n        }\n        return results\n      })\n    })\n  )\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {string} dataKey - Object to have parameter populated\n * @param {object} originalData - Data before population\n * @param {Function|object} populatesIn - Populate configs or function returning configs\n * @returns {Promise} Promise which resolves after populate data is loaded\n */\nexport function promisesForPopulate(\n  firebase,\n  dataKey,\n  originalData,\n  populatesIn\n) {\n  // TODO: Handle selecting of parameter to populate with (i.e. displayName of users/user)\n  const promisesArray = []\n  const results = {}\n\n  // test if data is a single object, try generating populates and looking for the child\n  const populatesForData = getPopulateObjs(\n    typeof populatesIn === 'function'\n      ? populatesIn(dataKey, originalData)\n      : populatesIn\n  )\n\n  const dataHasPopulateChilds = some(populatesForData, (populate) =>\n    has(originalData, populate.child)\n  )\n\n  if (dataHasPopulateChilds) {\n    // Data is a single object, resolve populates directly\n    forEach(populatesForData, (p) => {\n      if (isString(get(originalData, p.child))) {\n        return promisesArray.push(\n          getPopulateChild(firebase, p, get(originalData, p.child)).then(\n            (v) => {\n              // write child to result object under root name if it is found\n              if (v) {\n                set(results, `${p.root}.${get(originalData, p.child)}`, v)\n              }\n            }\n          )\n        )\n      }\n\n      // Single Parameter is list\n      return promisesArray.push(\n        populateList(firebase, get(originalData, p.child), p, results)\n      )\n    })\n  } else {\n    // Data is a list of objects, each value has parameters to be populated\n    // { '1': {someobject}, '2': {someobject} }\n    forEach(originalData, (d, key) => {\n      // generate populates for this data item if a fn was passed\n      const populatesForDataItem = getPopulateObj(\n        typeof populatesIn === 'function' ? populatesIn(key, d) : populatesIn\n      )\n\n      // resolve each populate for this data item\n      forEach(populatesForDataItem, (p) => {\n        // get value of parameter to be populated (key or list of keys)\n        const idOrList = get(d, p.child)\n\n        // Parameter/child of list item does not exist\n        if (!idOrList) {\n          return\n        }\n\n        // Parameter of each list item is single ID\n        if (isString(idOrList)) {\n          return promisesArray.push(\n            getPopulateChild(firebase, p, idOrList).then((v) => {\n              // write child to result object under root name if it is found\n              if (v) {\n                set(results, `${p.root}.${idOrList}`, v)\n              }\n              return results\n            })\n          )\n        }\n\n        // Parameter of each list item is a list of ids\n        if (Array.isArray(idOrList) || isObject(idOrList)) {\n          // Create single promise that includes a promise for each child\n          return promisesArray.push(\n            populateList(firebase, idOrList, p, results)\n          )\n        }\n      })\n    })\n  }\n\n  // Return original data after population promises run\n  return Promise.all(promisesArray).then(() => results)\n}\n"],"mappings":"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","ignoreList":[]}