{"version":3,"file":"helpers.js","names":["getVal","firebase","path","notSetValue","dotPath","getDotStrPath","valueAtPath","_get2","default","isLoaded","_len","arguments","length","args","Array","_key","every","arg","isEmpty","_len2","_key2","some","_size2","fixPath","substring","buildChildList","state","list","p","mapFn","isArray","_map2","_mapValues2","val","key","getKey","populateByKey","dotRoot","root","pathArr","childParam","push","pathString","join","data","keyProp","_objectSpread","_defineProperty","populateChild","child","childVal","String","storeAs","split","filter","Boolean","populateVal","_set2","childAlias","populate","populates","splitPath","topLevelPaths","indexOf","concat","_toConsumableArray","populatesForData","getPopulateObjs","slice","someArrayItemHasKey","array","_some2","item","_has2","dataHasPopulateChilds","map","_ref","dataValue","value","populatedValue","reduce","acc","v","_defaultsDeep2","childKey","populatesForDataItem","_reduce2","obj"],"sources":["../src/helpers.js"],"sourcesContent":["import {\n  size,\n  set,\n  get,\n  has,\n  map,\n  mapValues,\n  reduce,\n  defaultsDeep,\n  some\n} from 'lodash'\nimport { topLevelPaths } from './constants'\nimport { getPopulateObjs } from './utils/populate'\nimport { getDotStrPath } from './utils/reducers'\n\n/**\n * **Deprecated** - This helper will be removed in future versions. Please\n * use object destructuring or utilities from other libraries such as\n * [lodash's get](https://lodash.com/docs/4.17.15#get).\n * Get a value from firebase using slash notation. This enables an easy\n * migration from v1's dataToJS/pathToJS/populatedDataToJS functions to v2 syntax\n * **NOTE:** Setting a default value will cause `isLoaded` to always return true\n * @param {object} firebase - Firebase instance (state.firebase)\n * @param {string} path - Path of parameter to load\n * @param {any} notSetValue - Value to return if value is not\n * found in redux. This will cause `isLoaded` to always return true (since\n * value is set from the start).\n * @returns {any} Data located at path within firebase.\n * @example <caption>Basic</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect, getVal } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect(['todos/user1']),\n *   connect(({ firebase }) => ({\n *     // this.props.todos loaded from state.firebase.data.todos\n *     todos: getVal(firebase, 'data/todos/user1')\n *   }))\n * )\n * export default enhance(SomeComponent)\n * @example <caption>Base Paths</caption>\n * import { connect } from 'react-redux'\n * import { firebaseConnect, getVal } from 'react-redux-firebase'\n *\n * export default connect(({ firebase }) => ({\n *   // this.props.auth loaded from state.firebase.auth\n *   auth: getVal(firebase, 'auth'),\n *   profile: getVal(firebase, 'profile')\n * })(SomeComponent)\n * @example <caption>Default Value</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect, getVal } from 'react-redux-firebase'\n *\n * const defaultValue = {\n *  1: {\n *    text: 'Example Todo'\n *  }\n * }\n *\n * const enhance = compose(\n *   firebaseConnect(['todos/user1']),\n *   connect(({ firebase }) => ({\n *     // this.props.todos loaded from state.firebase.data.todos\n *     todos: getVal(firebase, 'data/todos/user1', defaultValue)\n *   }))\n * )\n *\n * export default enhance(SomeComponent)\n */\nexport function getVal(firebase, path, notSetValue) {\n  if (!firebase) {\n    return notSetValue\n  }\n\n  const dotPath = getDotStrPath(path)\n  const valueAtPath = get(firebase, dotPath, notSetValue)\n\n  return valueAtPath\n}\n\n/**\n * Detect whether data from redux state is loaded yet or not\n * @param {...object} args - Items to check loaded status of. A comma separated\n * list is also acceptable.\n * @returns {boolean} Whether or not item is loaded\n * @example\n * import React from 'react'\n * import PropTypes from 'prop-types'\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import firebaseConnect from 'react-redux-firebase/lib/firebaseConnect'\n * import { isLoaded, isEmpty } from 'react-redux-firebase/lib/utils'\n *\n * const enhance = compose(\n *   firebaseConnect(['todos']),\n *   connect(({ firebase: { data: { todos } } }) => ({\n *     todos // state.firebase.data.todos from redux passed as todos prop\n *   }))\n * )\n *\n * function Todos({ todos }) {\n *   // Message for if todos are loading\n *   if (!isLoaded(todos)) {\n *     return <span>Loading...</span>\n *   }\n *\n *   // Message if todos are empty\n *   if (isEmpty(todos)) {\n *     return <span>No Todos Found</span>\n *   }\n *\n *   return <div><pre>{JSON.stringify(todos, null, 2)}</pre></div>\n * }\n *\n * Todos.propTypes = {\n *   todos: PropTypes.object\n * }\n *\n * export default enhance(Todos)\n */\nexport function isLoaded(...args) {\n  return !args || !args.length\n    ? true\n    : args.every((arg) => arg !== undefined && get(arg, 'isLoaded') !== false)\n}\n\n/**\n * Detect whether items are empty or not\n * @param {object} args - Item to check loaded status of. A comma seperated list\n * is also acceptable.\n * @returns {boolean} Whether or not item is empty\n * @example\n * import React from 'react'\n * import PropTypes from 'prop-types'\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect, isEmpty, isLoaded } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect(['todos']),\n *   connect(({ firebase: { data: { todos } } }) => ({\n *     todos // state.firebase.data.todos from redux passed as todos prop\n *   }))\n * )\n *\n * function Todos({ todos }) {\n *   // Message for if todos are loading\n *   if (!isLoaded(todos)) {\n *     return <span>Loading...</span>\n *   }\n *\n *   // Message if todos are empty\n *   if (isEmpty(todos)) {\n *     return <span>No Todos Found</span>\n *   }\n *\n *   return <todos>{JSON.stringify(todos)}</todos>\n * }\n *\n * Todos.propTypes = {\n *   todos: PropTypes.object\n * }\n *\n * export default enhance(Todos)\n */\nexport function isEmpty(...args) {\n  return !args || !args.length\n    ? true\n    : args.some((arg) => !(arg && size(arg)) || arg.isEmpty === true)\n}\n\n/**\n * @description Fix path by adding \"/\" to path if needed\n * @param {string} path - Path string to fix\n * @returns {string} - Fixed path\n * @private\n */\nexport function fixPath(path) {\n  return (path.substring(0, 1) === '/' ? '' : '/') + path\n}\n\n/**\n * @private\n * @param {object} state - Firebase state object\n * @param {object} list - Path of parameter to load\n * @param {object} p - Object with population settings\n * @returns {object} List of child objects\n */\nfunction buildChildList(state, list, p) {\n  const mapFn = Array.isArray(list) ? map : mapValues\n  return mapFn(list, (val, key) => {\n    let getKey = val\n    // Handle key: true lists\n    if (val === true || p.populateByKey) {\n      getKey = key\n    }\n    // Allow for aliasing populated data see #126 for more details\n    const dotRoot = getDotStrPath(p.root)\n    const pathArr = [dotRoot, getKey]\n\n    // Handle child param\n    if (p.childParam) {\n      pathArr.push(p.childParam)\n    }\n\n    const pathString = pathArr.join('.')\n\n    // Set to child under key if populate child exists\n    if (get(state.data, pathString)) {\n      return p.keyProp\n        ? { [p.keyProp]: getKey, ...get(state.data, pathString) }\n        : get(state.data, pathString)\n    }\n    // Populate child does not exist\n    return val === true || p.populateByKey ? val : getKey\n  })\n}\n\n/**\n * @private\n * @param {object} state - Firebase state object\n * @param {object} child - Path of parameter to load\n * @param {object} p - Object with population settings\n * @returns {object} Populated child object\n */\nfunction populateChild(state, child, p) {\n  // no matching child parameter\n  const childVal = get(child, p.child)\n  if (!child || !childVal) {\n    return null\n  }\n  // populate child is key\n  if (typeof childVal === 'string' || childVal instanceof String) {\n    // attach child paramter if it exists\n    const dotRoot = (p.storeAs ? p.storeAs : p.root)\n      .split('/')\n      .filter(Boolean) // Drop falsey values (compact)\n      .join('.')\n    const pathArr = [dotRoot, childVal]\n\n    // Handle child param\n    if (p.childParam) {\n      pathArr.push(p.childParam)\n    }\n\n    const pathString = pathArr.join('.')\n\n    const populateVal = get(state.data, pathString)\n    if (populateVal) {\n      return set(\n        {},\n        p.childAlias || p.child,\n        p.keyProp ? { [p.keyProp]: childVal, ...populateVal } : populateVal\n      )\n    }\n    // matching child does not exist\n    return child\n  }\n  // populate child list\n  return set({}, p.childAlias || p.child, buildChildList(state, childVal, p))\n}\n\n/**\n * Populate with data from multiple locations of redux state.\n * @param {object} state - Firebase state object (state.firebase in redux store)\n * @param {string} path - Path of parameter to load\n * @param {Array} populates - Array of populate config objects\n * @param {object|string|boolean} notSetValue - Value to return if value is not found\n * @returns {object} Data located at path within Immutable Object\n * @example <caption>Basic</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect } from 'react-redux-firebase'\n * const populates = [{ child: 'owner', root: 'users' }]\n *\n * const enhance = compose(\n *   firebaseConnect([\n *     { path: 'todos', populates } // load \"todos\" and matching \"users\" to redux\n *   ]),\n *   connect((state) => ({\n *     // this.props.todos loaded from state.firebase.data.todos\n *     // each todo has child 'owner' populated from matching uid in 'users' root\n *     // for loading un-populated todos use state.firebase.data.todos\n *     todos: populate(state.firebase, 'todos', populates),\n *   }))\n * )\n *\n * export default enhance(SomeComponent)\n */\nexport function populate(state, path, populates, notSetValue) {\n  const splitPath = path.split('/').filter(Boolean) // Drop falsey values (compact)\n  // append 'data' prefix to path if it is not a top level path\n  const pathArr =\n    topLevelPaths.indexOf(splitPath[0]) === -1\n      ? ['data', ...splitPath]\n      : splitPath\n  const dotPath = pathArr.join('.')\n  // Gather data from top level if path is profile (handles populating profile)\n  const data = get(state, dotPath, notSetValue)\n\n  // Return notSetValue for undefined child\n  if (!state || data === notSetValue) {\n    return notSetValue\n  }\n  // Return null for null child\n  if (data === null) {\n    return null\n  }\n\n  // check for if data is single object or a list of objects\n  const populatesForData = getPopulateObjs(\n    typeof populates === 'function'\n      ? populates(pathArr.slice(-1)[0], data) // pass last slice in path\n      : populates\n  )\n\n  if (Array.isArray(data)) {\n    // When using a path in ordered, data will be an array instead of an object\n    // and data is located at the `value` prop\n    const someArrayItemHasKey = (array) => (key) =>\n      some(array, (item) => has(item, key))\n\n    // Check items within the list to see if value exists for some populate parameters\n    const dataHasPopulateChilds = some(populatesForData, (populate) =>\n      someArrayItemHasKey(data)(['value', populate.child])\n    )\n\n    // Populate if populate children exist\n    if (dataHasPopulateChilds) {\n      return data.map(({ key, value: dataValue }) => {\n        const populatedValue = populatesForData\n          .map((p) => populateChild(state, dataValue, p))\n          .reduce((acc, v) => defaultsDeep(v, acc), dataValue)\n\n        return {\n          key,\n          value: populatedValue\n        }\n      })\n    }\n\n    // return unpopulated data if no populates have values\n    return data\n  }\n\n  // check each populate child parameter for existence\n  const dataHasPopulateChilds = some(populatesForData, (p) =>\n    has(data, p.child)\n  )\n\n  // Single object that contains at least one child parameter\n  if (dataHasPopulateChilds) {\n    return populatesForData\n      .map((p) => populateChild(state, data, p))\n      .reduce((acc, v) => defaultsDeep(v, acc), data)\n  }\n\n  // Return for profile since it is a single object (following is for a list of objects)\n  // TODO: Improve this logic to allow for other paths containing profile\n  if (pathArr.indexOf('profile') !== -1) {\n    return data\n  }\n\n  // Data is a map of objects, each value has parameters to be populated\n  return mapValues(data, (child, childKey) => {\n    // use child's key if doing ordered populate\n    const key = pathArr[0] === 'ordered' ? child.key : childKey\n    // get populate settings on item level (passes child if populates is a function)\n    const populatesForDataItem = getPopulateObjs(\n      typeof populates === 'function' ? populates(key, child) : populates\n    )\n    // confirm at least one populate value exists on child\n    const dataHasPopulateChilds = some(populatesForDataItem, (p) =>\n      has(child, p.child)\n    )\n    // return unmodified child if no populate params exist on child\n    if (!dataHasPopulateChilds) {\n      return child\n    }\n    // combine data from all populates to one object starting with original data\n    return reduce(\n      map(populatesForDataItem, (p) => populateChild(state, child, p)),\n      (obj, v) => defaultsDeep(v, obj),\n      child\n    )\n  })\n}\n"],"mappings":"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","ignoreList":[]}